Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: mnist_6_100
  path: models/eran/mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 1024
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
    reset_threshold: 1.0
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 300
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      use_min: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false

Experiments at Mon Nov 18 18:21:10 2024 on iitb-dgx2.iitb.ac.in
Sequential(
  (0): Flatten(start_dim=1, end_dim=-1)
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  1.weight: shape torch.Size([100, 784])
  1.bias: shape torch.Size([100])
  3.weight: shape torch.Size([100, 100])
  3.bias: shape torch.Size([100])
  5.weight: shape torch.Size([100, 100])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([100, 100])
  7.bias: shape torch.Size([100])
  9.weight: shape torch.Size([100, 100])
  9.bias: shape torch.Size([100])
  11.weight: shape torch.Size([10, 100])
  11.bias: shape torch.Size([10])
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226458)
Note runnerup label is empty here!
############################
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True)
  (/21): BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
  (/input.15): BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True)
  (/23): BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
  (/24): BoundLinear(name=/24, inputs=[/23, /11, /12], perturbed=True)
)
Original output: tensor([[-2.63950467, -1.89609134, -0.17841400,  1.36326098, -0.86775976,
         -3.39097667, -7.02553511, 12.61473370, -4.18431473,  3.69611192]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True): [(BoundRelu(name=/21, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True): [(BoundRelu(name=/23, inputs=[/input.15], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
layer /15 using sparse-features alpha with shape [45]; unstable size 45; total size 100 ([1, 100])
layer /15 start_node /input.3 using sparse-spec alpha [2, 47, 1, 45] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.7 using sparse-spec alpha [2, 45, 1, 45] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.11 using sparse-spec alpha [2, 61, 1, 45] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.15 using sparse-spec alpha [2, 73, 1, 45] with unstable size 72 total_size 100 output_shape torch.Size([100])
layer /15 start_node /24 using full alpha [2, 9, 1, 45] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [46]; unstable size 46; total size 100 ([1, 100])
layer /17 start_node /input.7 using sparse-spec alpha [2, 45, 1, 46] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.11 using sparse-spec alpha [2, 61, 1, 46] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.15 using sparse-spec alpha [2, 73, 1, 46] with unstable size 72 total_size 100 output_shape torch.Size([100])
layer /17 start_node /24 using full alpha [2, 9, 1, 46] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [44]; unstable size 44; total size 100 ([1, 100])
layer /19 start_node /input.11 using sparse-spec alpha [2, 61, 1, 44] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /19 start_node /input.15 using sparse-spec alpha [2, 73, 1, 44] with unstable size 72 total_size 100 output_shape torch.Size([100])
layer /19 start_node /24 using full alpha [2, 9, 1, 44] with unstable size None total_size 9 output_shape 9
layer /21 using sparse-features alpha with shape [60]; unstable size 60; total size 100 ([1, 100])
layer /21 start_node /input.15 using sparse-spec alpha [2, 73, 1, 60] with unstable size 72 total_size 100 output_shape torch.Size([100])
layer /21 start_node /24 using full alpha [2, 9, 1, 60] with unstable size None total_size 9 output_shape 9
layer /23 using sparse-features alpha with shape [72]; unstable size 72; total size 100 ([1, 100])
layer /23 start_node /24 using full alpha [2, 9, 1, 72] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.74979639, 3.75435543, 2.82157230, 1.22264481, 5.14026833, 5.28249073,
         7.97220325, 4.60152245, 0.90058565]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 1.5515 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True)
  (/21): BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
  (/input.15): BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True)
  (/23): BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
  (/24): BoundLinear(name=/24, inputs=[/23, /11, /12], perturbed=True)
)
Original output: tensor([[-1.95686913,  1.62718642,  9.71981144,  1.05894375, -0.93081492,
         -3.92067337, -2.33241153,  0.30607182, -0.84735060, -4.73033905]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True): [(BoundRelu(name=/21, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True): [(BoundRelu(name=/23, inputs=[/input.15], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /input.3 using sparse-spec alpha [2, 49, 1, 26] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.7 using sparse-spec alpha [2, 48, 1, 26] with unstable size 47 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.11 using sparse-spec alpha [2, 66, 1, 26] with unstable size 65 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.15 using sparse-spec alpha [2, 80, 1, 26] with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /15 start_node /24 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [48]; unstable size 48; total size 100 ([1, 100])
layer /17 start_node /input.7 using sparse-spec alpha [2, 48, 1, 48] with unstable size 47 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.11 using sparse-spec alpha [2, 66, 1, 48] with unstable size 65 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.15 using sparse-spec alpha [2, 80, 1, 48] with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /17 start_node /24 using full alpha [2, 9, 1, 48] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [47]; unstable size 47; total size 100 ([1, 100])
layer /19 start_node /input.11 using sparse-spec alpha [2, 66, 1, 47] with unstable size 65 total_size 100 output_shape torch.Size([100])
layer /19 start_node /input.15 using sparse-spec alpha [2, 80, 1, 47] with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /19 start_node /24 using full alpha [2, 9, 1, 47] with unstable size None total_size 9 output_shape 9
layer /21 using sparse-features alpha with shape [65]; unstable size 65; total size 100 ([1, 100])
layer /21 start_node /input.15 using sparse-spec alpha [2, 80, 1, 65] with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /21 start_node /24 using full alpha [2, 9, 1, 65] with unstable size None total_size 9 output_shape 9
layer /23 using sparse-features alpha with shape [79]; unstable size 79; total size 100 ([1, 100])
layer /23 start_node /24 using full alpha [2, 9, 1, 79] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.63014412, 0.13440371, 0.49759007, 2.13554430, 2.55259418, 2.10277271,
         1.88148355, 1.77290726, 3.66955853]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0577 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True)
  (/21): BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
  (/input.15): BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True)
  (/23): BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
  (/24): BoundLinear(name=/24, inputs=[/23, /11, /12], perturbed=True)
)
Original output: tensor([[-3.36013126,  7.92522287,  1.01381636, -2.30793953,  0.63591421,
         -1.90936446, -1.59363687,  0.66697335,  1.02538371, -1.86717057]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True): [(BoundRelu(name=/21, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True): [(BoundRelu(name=/23, inputs=[/input.15], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
layer /15 using sparse-features alpha with shape [58]; unstable size 58; total size 100 ([1, 100])
layer /15 start_node /input.3 using sparse-spec alpha [2, 91, 1, 58] with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.7 using full alpha [2, 100, 1, 58] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.11 using full alpha [2, 100, 1, 58] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.15 using full alpha [2, 100, 1, 58] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /24 using full alpha [2, 9, 1, 58] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [90]; unstable size 90; total size 100 ([1, 100])
layer /17 start_node /input.7 using full alpha [2, 100, 1, 90] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.11 using full alpha [2, 100, 1, 90] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.15 using full alpha [2, 100, 1, 90] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /24 using full alpha [2, 9, 1, 90] with unstable size None total_size 9 output_shape 9
layer /19 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /19 start_node /input.11 using full alpha [2, 100, 1, 100] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /19 start_node /input.15 using full alpha [2, 100, 1, 100] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /19 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
layer /21 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /21 start_node /input.15 using full alpha [2, 100, 1, 100] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /21 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
layer /23 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /23 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -96.26896667,  -93.05474091,  -94.62802887,  -90.18844604,
          -93.86216736,  -79.27043152,  -82.70548248,  -85.52623749,
         -107.90163422]], device='cuda:0') None
best_l after optimization: -478.836669921875
alpha/beta optimization time: 7.371962070465088
initial alpha-crown bounds: tensor([[-54.96273804, -52.46290588, -53.53620911, -55.58019257, -54.94072723,
         -43.27857590, -48.40031433, -52.51209641, -63.16291428]],
       device='cuda:0')
Worst class: (+ rhs) -63.16291427612305
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.36013126,  7.92522287,  1.01381612, -2.30793953,  0.63591421,
         -1.90936422, -1.59363687,  0.66697317,  1.02538347, -1.86717033]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.50573683,  4.66374254,  3.03454113, -1.32650399,  0.34227529,
          -2.13131261, -1.40160012,  0.85538810,  0.27549517, -2.50271702],
         [-2.50573683,  4.66374254,  3.03454113, -1.32650399,  0.34227529,
          -2.13131261, -1.40160012,  0.85538810,  0.27549517, -2.50271702]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[7.16947937, 1.62920141, 5.99024677, 4.32146740, 6.79505539,
          6.06534290, 3.80835438, 4.38824749, 7.16645956]]], device='cuda:0')
number of violation:  0
Attack finished in 0.5929 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /15 using sparse-features alpha with shape [58]; unstable size 58; total size 100 ([1, 100])
layer /15 start_node /input.3 using sparse-spec alpha [2, 91, 1, 58] with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.7 using full alpha [2, 100, 1, 58] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.11 using full alpha [2, 100, 1, 58] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.15 using full alpha [2, 100, 1, 58] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /24 using full alpha [2, 9, 1, 58] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [90]; unstable size 90; total size 100 ([1, 100])
layer /17 start_node /input.7 using full alpha [2, 100, 1, 90] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.11 using full alpha [2, 100, 1, 90] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.15 using full alpha [2, 100, 1, 90] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /24 using full alpha [2, 9, 1, 90] with unstable size None total_size 9 output_shape 9
layer /19 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /19 start_node /input.11 using full alpha [2, 100, 1, 100] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /19 start_node /input.15 using full alpha [2, 100, 1, 100] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /19 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
layer /21 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /21 start_node /input.15 using full alpha [2, 100, 1, 100] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /21 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
layer /23 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /23 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Restricted license - for non-production use only - expires 2025-11-24
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

refine the bounds for layer  /15
maximum relu layer improved by MIP so far 0
refine the bounds for layer  /17
sorted candidates [('lay/input.3_0', None, tensor(-0.23972481), tensor(1.91583276)), ('lay/input.3_1', None, tensor(-1.06254363), tensor(0.83770549)), ('lay/input.3_2', None, tensor(-1.29426134), tensor(0.89089507)), ('lay/input.3_3', None, tensor(-1.19485164), tensor(1.19940436)), ('lay/input.3_4', None, tensor(-1.52991319), tensor(0.99951398)), ('lay/input.3_5', None, tensor(-1.70161474), tensor(0.73442203)), ('lay/input.3_7', None, tensor(-0.97030354), tensor(1.00975990)), ('lay/input.3_8', None, tensor(-1.03120530), tensor(0.93065047)), ('lay/input.3_9', None, tensor(-1.54301977), tensor(0.25033513)), ('lay/input.3_10', None, tensor(-1.90803301), tensor(0.76663047)), ('lay/input.3_11', None, tensor(-0.67861700), tensor(1.47129345)), ('lay/input.3_12', None, tensor(-1.23334455), tensor(0.73641312)), ('lay/input.3_13', None, tensor(-0.40856278), tensor(1.71502447)), ('lay/input.3_15', None, tensor(-0.85632515), tensor(1.51733899)), ('lay/input.3_16', None, tensor(-1.95317388), tensor(0.13547862)), ('lay/input.3_17', None, tensor(-2.06182289), tensor(0.11634290)), ('lay/input.3_18', None, tensor(-1.88315129), tensor(0.29261333)), ('lay/input.3_19', None, tensor(-1.37538326), tensor(0.92988658)), ('lay/input.3_20', None, tensor(-1.57454586), tensor(0.25228232)), ('lay/input.3_21', None, tensor(-1.27947283), tensor(0.70853293)), ('lay/input.3_22', None, tensor(-1.28937781), tensor(0.54548681)), ('lay/input.3_23', None, tensor(-1.48232746), tensor(0.54913890)), ('lay/input.3_24', None, tensor(-1.27524757), tensor(0.63025618)), ('lay/input.3_25', None, tensor(-0.25191438), tensor(1.76526046)), ('lay/input.3_26', None, tensor(-1.81076646), tensor(0.58856583)), ('lay/input.3_28', None, tensor(-1.31197286), tensor(0.57443649)), ('lay/input.3_29', None, tensor(-0.47493827), tensor(1.57577181)), ('lay/input.3_30', None, tensor(-1.51758790), tensor(0.40512621)), ('lay/input.3_31', None, tensor(-1.56665599), tensor(1.42533386)), ('lay/input.3_32', None, tensor(-1.19442666), tensor(0.83461094)), ('lay/input.3_33', None, tensor(-1.13751912), tensor(1.17022848)), ('lay/input.3_34', None, tensor(-1.41806865), tensor(0.77725035)), ('lay/input.3_35', None, tensor(-1.80673587), tensor(0.13796288)), ('lay/input.3_36', None, tensor(-1.54427576), tensor(0.44238847)), ('lay/input.3_37', None, tensor(-1.45094240), tensor(0.31575960)), ('lay/input.3_38', None, tensor(-1.45328140), tensor(0.54666305)), ('lay/input.3_39', None, tensor(-1.40395117), tensor(0.12498978)), ('lay/input.3_40', None, tensor(-1.88208520), tensor(0.22405648)), ('lay/input.3_41', None, tensor(-1.23867702), tensor(0.58158761)), ('lay/input.3_42', None, tensor(-1.76768136), tensor(0.06925106)), ('lay/input.3_43', None, tensor(-1.50932062), tensor(1.24923921)), ('lay/input.3_44', None, tensor(-2.08379483), tensor(0.04892409)), ('lay/input.3_45', None, tensor(-1.58952141), tensor(0.14169902)), ('lay/input.3_46', None, tensor(-0.07901013), tensor(1.68477988)), ('lay/input.3_49', None, tensor(-1.38612843), tensor(0.51994741)), ('lay/input.3_50', None, tensor(-0.18119812), tensor(1.99213147)), ('lay/input.3_51', None, tensor(-1.28567839), tensor(0.75921518)), ('lay/input.3_52', None, tensor(-1.51653504), tensor(0.83835709)), ('lay/input.3_53', None, tensor(-0.79216814), tensor(1.45653200)), ('lay/input.3_54', None, tensor(-0.32377613), tensor(1.51696277)), ('lay/input.3_56', None, tensor(-0.65519506), tensor(0.93288177)), ('lay/input.3_57', None, tensor(-1.65025246), tensor(1.39106297)), ('lay/input.3_58', None, tensor(-1.33832920), tensor(0.76341808)), ('lay/input.3_60', None, tensor(-1.47109532), tensor(0.53317851)), ('lay/input.3_61', None, tensor(-2.71823215), tensor(0.47243831)), ('lay/input.3_62', None, tensor(-1.82188213), tensor(0.18851662)), ('lay/input.3_63', None, tensor(-0.89518476), tensor(0.71442521)), ('lay/input.3_64', None, tensor(-1.85500550), tensor(0.14376217)), ('lay/input.3_65', None, tensor(-0.29569095), tensor(2.37345552)), ('lay/input.3_66', None, tensor(-0.74872309), tensor(1.15708160)), ('lay/input.3_67', None, tensor(-0.84362429), tensor(0.92636645)), ('lay/input.3_68', None, tensor(-1.30423880), tensor(0.79234761)), ('lay/input.3_69', None, tensor(-0.02143681), tensor(2.16116142)), ('lay/input.3_70', None, tensor(-1.74989426), tensor(0.71207643)), ('lay/input.3_71', None, tensor(-1.04046667), tensor(0.88578057)), ('lay/input.3_72', None, tensor(-0.82957196), tensor(0.84702325)), ('lay/input.3_73', None, tensor(-1.90830684), tensor(0.62211555)), ('lay/input.3_74', None, tensor(-1.27112699), tensor(0.74405360)), ('lay/input.3_75', None, tensor(-1.81338143), tensor(0.14051950)), ('lay/input.3_76', None, tensor(-1.08288157), tensor(0.77949363)), ('lay/input.3_77', None, tensor(-2.59696436), tensor(0.24488217)), ('lay/input.3_78', None, tensor(-2.06961775), tensor(0.97056198)), ('lay/input.3_79', None, tensor(-1.88117540), tensor(0.52248031)), ('lay/input.3_80', None, tensor(-0.73909861), tensor(0.99922246)), ('lay/input.3_81', None, tensor(-0.95295215), tensor(2.64636183)), ('lay/input.3_82', None, tensor(-1.02006412), tensor(1.23443544)), ('lay/input.3_83', None, tensor(-1.10886216), tensor(1.15726101)), ('lay/input.3_84', None, tensor(-0.96961117), tensor(1.13269579)), ('lay/input.3_85', None, tensor(-0.50403023), tensor(1.53712869)), ('lay/input.3_86', None, tensor(-1.68433833), tensor(0.26027498)), ('lay/input.3_87', None, tensor(-1.73634076), tensor(0.67648530)), ('lay/input.3_88', None, tensor(-0.02037579), tensor(2.37364388)), ('lay/input.3_89', None, tensor(-1.09496546), tensor(0.85139787)), ('lay/input.3_92', None, tensor(-1.53275311), tensor(0.59926474)), ('lay/input.3_93', None, tensor(-1.54225838), tensor(0.74308383)), ('lay/input.3_94', None, tensor(-0.22323358), tensor(1.89548445)), ('lay/input.3_95', None, tensor(-1.25819969), tensor(1.28550518)), ('lay/input.3_96', None, tensor(-1.46116781), tensor(0.51461852)), ('lay/input.3_98', None, tensor(-0.48516384), tensor(1.31256104)), ('lay/input.3_99', None, tensor(-1.58072877), tensor(0.54185653))] filter: 1.0
PGD done for relu layer 1
Solving MIP for lay/input.3_0,[-0.23972481489181519,1.915832757949829]=>[1e-05,1.915832757949829] (15,-1; -1,-1), time: 0.3311s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_16,[-1.9531738758087158,0.13547861576080322]=>[-1.9531738758087158,-1e-05] (-1,-1; 15,-1), time: 0.3124s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_17,[-2.0618228912353516,0.11634290218353271]=>[-2.0618228912353516,-1e-05] (-1,-1; 15,-1), time: 0.3149s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_9,[-1.5430197715759277,0.25033512711524963]=>[-1.5430197715759277,-1e-05] (-1,-1; 15,-1), time: 0.7441s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_13,[-0.4085627794265747,1.715024471282959]=>[1e-05,1.715024471282959] (15,-1; -1,-1), time: 0.9608s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_18,[-1.8831512928009033,0.29261332750320435]=>[-1.8831512928009033,-1e-05] (-1,-1; 15,-1), time: 1.0450s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_7,[-0.9703035354614258,1.0097599029541016]=>[-0.5771242638425339,0.6509438273634397] (2,-1; 2,-1), time: 2.0931s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_20,[-1.5745458602905273,0.2522823214530945]=>[-0.9877662653687214,0.07040650512797778] (2,-1; 2,-1), time: 3.2952s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_10,[-1.908033013343811,0.7666304707527161]=>[-1.2588452284983132,0.28037675405722345] (2,-1; 2,-1), time: 3.8147s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_25,[-0.251914381980896,1.7652604579925537]=>[1e-05,1.7652604579925537] (15,-1; -1,-1), time: 0.4203s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_8,[-1.0312052965164185,0.9306504726409912]=>[-0.49972265913719544,0.5371882660402528] (2,-1; 2,-1), time: 4.1362s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_4,[-1.5299131870269775,0.9995139837265015]=>[-0.8581809241336441,0.4054235741950592] (2,-1; 2,-1), time: 4.1809s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_15,[-0.8563251495361328,1.5173389911651611]=>[-0.32487697501503193,0.8876748207622404] (2,-1; 2,-1), time: 4.5732s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_11,[-0.678617000579834,1.4712934494018555]=>[-0.2181503139904123,1.0921132267590936] (2,-1; 2,-1), time: 4.6608s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_12,[-1.233344554901123,0.7364131212234497]=>[-0.694384295394705,0.4743702405911237] (2,-1; 2,-1), time: 4.7073s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_5,[-1.7016147375106812,0.7344220280647278]=>[-0.9093945558629257,0.27078158566490773] (2,-1; 2,-1), time: 5.0264s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_19,[-1.3753832578659058,0.9298865795135498]=>[-0.8634035446198091,0.4280014268991521] (2,-1; 2,-1), time: 4.8709s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_3,[-1.1948516368865967,1.1994043588638306]=>[-0.5658852623185693,0.605470694581732] (2,-1; 2,-1), time: 5.2344s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_22,[-1.2893778085708618,0.5454868078231812]=>[-0.7093411169776178,0.27449210459989215] (2,-1; 2,-1), time: 4.4334s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_23,[-1.4823274612426758,0.5491389036178589]=>[-0.8959681030887012,0.2548740828281326] (2,-1; 2,-1), time: 4.0351s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_35,[-1.806735873222351,0.13796287775039673]=>[-1.806735873222351,-1e-05] (-1,-1; 15,-1), time: 0.2516s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_39,[-1.4039511680603027,0.12498977780342102]=>[-1.4039511680603027,-1e-05] (-1,-1; 15,-1), time: 0.2294s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_21,[-1.279472827911377,0.7085329294204712]=>[-0.6943499910026731,0.33586892509799104] (2,-1; 2,-1), time: 4.9664s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_40,[-1.8820852041244507,0.22405648231506348]=>[-1.8820852041244507,-1e-05] (-1,-1; 15,-1), time: 0.4481s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_29,[-0.4749382734298706,1.5757718086242676]=>[1e-05,1.5757718086242676] (15,-1; -1,-1), time: 2.0068s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_42,[-1.767681360244751,0.06925106048583984]=>[-1.767681360244751,-1e-05] (-1,-1; 15,-1), time: 0.2344s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_44,[-2.0837948322296143,0.04892408847808838]=>[-2.0837948322296143,-1e-05] (-1,-1; 15,-1), time: 0.2592s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_1,[-1.0625436305999756,0.8377054929733276]=>[-0.5052107588528176,0.40656472962201096] (2,-1; 2,-1), time: 6.6823s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_37,[-1.4509423971176147,0.3157595992088318]=>[-1.4509423971176147,-1e-05] (-1,-1; 15,-1), time: 1.2593s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_24,[-1.275247573852539,0.630256175994873]=>[-0.747793575665016,0.30335037631415884] (2,-1; 2,-1), time: 4.6613s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_45,[-1.5895214080810547,0.14169901609420776]=>[-1.5895214080810547,-1e-05] (-1,-1; 15,-1), time: 0.2782s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_46,[-0.07901012897491455,1.6847798824310303]=>[1e-05,1.6847798824310303] (15,-1; -1,-1), time: 0.2902s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_2,[-1.2942613363265991,0.8908950686454773]=>[-0.9635432478124938,0.1888512838896438] (2,-1; 2,-1), time: 6.9937s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_50,[-0.1811981201171875,1.9921314716339111]=>[1e-05,1.9921314716339111] (15,-1; -1,-1), time: 0.2793s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_54,[-0.32377612590789795,1.5169627666473389]=>[1e-05,1.5169627666473389] (15,-1; -1,-1), time: 0.4535s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_31,[-1.5666559934616089,1.425333857536316]=>[-0.8261794364731824,0.8450869612260945] (2,-1; 2,-1), time: 3.5525s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_28,[-1.3119728565216064,0.5744364857673645]=>[-0.9529469460465754,0.10932804980099499] (2,-1; 2,-1), time: 4.3503s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_26,[-1.8107664585113525,0.5885658264160156]=>[-1.1736036148200455,0.11353942871682002] (2,-1; 2,-1), time: 4.7752s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_34,[-1.4180686473846436,0.777250349521637]=>[-0.8733735470272921,0.35175730283456014] (2,-1; 2,-1), time: 4.0896s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_32,[-1.1944266557693481,0.8346109390258789]=>[-0.7836807728986598,0.3162996479962378] (2,-1; 2,-1), time: 4.5180s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_33,[-1.137519121170044,1.1702284812927246]=>[-0.6237593190719499,0.588297755407305] (2,-1; 2,-1), time: 4.6318s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_62,[-1.8218821287155151,0.18851661682128906]=>[-1.8218821287155151,-1e-05] (-1,-1; 15,-1), time: 0.2569s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_64,[-1.8550055027008057,0.14376217126846313]=>[-1.8550055027008057,-1e-05] (-1,-1; 15,-1), time: 0.2663s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_65,[-0.29569095373153687,2.37345552444458]=>[1e-05,2.37345552444458] (15,-1; -1,-1), time: 0.2891s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_30,[-1.5175879001617432,0.4051262140274048]=>[-0.9371485333505917,0.09738889490358893] (2,-1; 2,-1), time: 6.0702s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_53,[-0.792168140411377,1.4565320014953613]=>[-0.22640322566089666,1.0352940917110758] (2,-1; 2,-1), time: 3.5011s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_51,[-1.2856783866882324,0.7592151761054993]=>[-0.8357896025981686,0.30547810253982605] (2,-1; 2,-1), time: 3.7385s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_38,[-1.4532814025878906,0.5466630458831787]=>[-0.7296273775973818,0.339644786689418] (2,-1; 2,-1), time: 5.5580s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_69,[-0.02143681049346924,2.161161422729492]=>[1e-05,2.161161422729492] (15,-1; -1,-1), time: 0.3063s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_52,[-1.5165350437164307,0.8383570909500122]=>[-0.9124908105641154,0.43862546006574643] (2,-1; 2,-1), time: 4.3642s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_41,[-1.2386770248413086,0.5815876126289368]=>[-1.2386770248413086,-1e-05] (-1,-1; 15,-1), time: 5.6075s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_49,[-1.3861284255981445,0.5199474096298218]=>[-0.8956283602842211,0.1776624235645183] (2,-1; 2,-1), time: 4.9413s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_43,[-1.509320616722107,1.249239206314087]=>[-0.6725003119586523,0.8021682705821186] (2,-1; 2,-1), time: 5.5081s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_75,[-1.8133814334869385,0.14051949977874756]=>[-1.8133814334869385,-1e-05] (-1,-1; 15,-1), time: 0.2355s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_57,[-1.6502524614334106,1.3910629749298096]=>[-0.9201097568864991,0.8558360415446858] (2,-1; 2,-1), time: 3.8915s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_77,[-2.5969643592834473,0.24488216638565063]=>[-2.5969643592834473,-1e-05] (-1,-1; 15,-1), time: 0.2088s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_36,[-1.5442757606506348,0.44238847494125366]=>[-0.8641969989172755,0.08121840507831042] (2,-1; 2,-1), time: 7.5307s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_63,[-0.8951847553253174,0.7144252061843872]=>[-0.4730002713799854,0.45695076633017967] (2,-1; 2,-1), time: 3.7088s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_60,[-1.471095323562622,0.5331785082817078]=>[-0.9879793446148782,0.10933682913651677] (2,-1; 2,-1), time: 4.4824s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_67,[-0.8436242938041687,0.9263664484024048]=>[-0.5355370147699536,0.49898615562513043] (2,-1; 2,-1), time: 3.8069s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_68,[-1.3042387962341309,0.7923476099967957]=>[-0.875365899208195,0.24928821533663903] (2,-1; 2,-1), time: 4.1572s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_79,[-1.8811753988265991,0.522480309009552]=>[-1.8811753988265991,-1e-05] (-1,-1; 15,-1), time: 2.1290s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_70,[-1.7498942613601685,0.7120764255523682]=>[-1.2964316875334765,0.10882879023314244] (2,-1; 2,-1), time: 4.0231s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_58,[-1.3383291959762573,0.7634180784225464]=>[-0.804136106047801,0.1674519963791388] (2,-1; 2,-1), time: 6.7581s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_76,[-1.0828815698623657,0.7794936299324036]=>[-0.6379567336664552,0.410906782079236] (2,-1; 2,-1), time: 3.5994s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_73,[-1.9083068370819092,0.6221155524253845]=>[-1.2558361926310329,0.10898877354545525] (2,-1; 2,-1), time: 4.1845s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_88,[-0.02037578821182251,2.3736438751220703]=>[1e-05,2.3736438751220703] (15,-1; -1,-1), time: 0.2970s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_71,[-1.0404666662216187,0.8857805728912354]=>[-0.49779744531079534,0.4870713743359271] (2,-1; 2,-1), time: 4.9678s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_74,[-1.2711269855499268,0.7440536022186279]=>[-0.7025938293681797,0.3414294638095219] (2,-1; 2,-1), time: 4.3805s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_72,[-0.8295719623565674,0.8470232486724854]=>[-0.3847880479983167,0.47648877492055014] (2,-1; 2,-1), time: 4.7428s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_86,[-1.6843383312225342,0.2602749764919281]=>[-1.6843383312225342,-1e-05] (-1,-1; 15,-1), time: 1.1356s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_94,[-0.22323358058929443,1.895484447479248]=>[1e-05,1.895484447479248] (15,-1; -1,-1), time: 0.3045s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_61,[-2.7182321548461914,0.4724383056163788]=>[-1.5319411248446246,0.15780063477716982] (2,-1; 2,-1), time: 7.6277s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_78,[-2.069617748260498,0.9705619812011719]=>[-1.3266408037365627,0.25995542450820786] (2,-1; 2,-1), time: 4.5174s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_66,[-0.7487230896949768,1.1570816040039062]=>[-0.1390872125900362,0.8496354051923128] (2,-1; 2,-1), time: 6.9677s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_80,[-0.7390986084938049,0.999222457408905]=>[-0.3648425179375625,0.6010203399478742] (2,-1; 2,-1), time: 4.2375s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_81,[-0.9529521465301514,2.646361827850342]=>[-0.23550829108729654,1.7754457236674184] (2,-1; 2,-1), time: 4.3853s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_56,[-0.6551950573921204,0.932881772518158]=>[-0.1067083635519742,0.6331535191343232] (2,-1; 2,-1), time: 10.4421s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_85,[-0.5040302276611328,1.5371286869049072]=>[1e-05,1.5371286869049072] (15,-1; -1,-1), time: 3.2665s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_82,[-1.020064115524292,1.2344354391098022]=>[-0.38176227629381104,0.9260200037360139] (2,-1; 2,-1), time: 4.3848s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_84,[-0.9696111679077148,1.1326957941055298]=>[-0.4908008028348174,0.6774332243574871] (2,-1; 2,-1), time: 3.8148s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_87,[-1.7363407611846924,0.6764853000640869]=>[-0.976170275044787,0.42601997834614] (2,-1; 2,-1), time: 3.3079s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_98,[-0.4851638376712799,1.31256103515625]=>[1e-05,1.31256103515625] (15,-1; -1,-1), time: 2.4037s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_83,[-1.1088621616363525,1.1572610139846802]=>[-0.5475764183059679,0.5099968051815091] (2,-1; 2,-1), time: 5.3343s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_96,[-1.461167812347412,0.5146185159683228]=>[-0.9047285561908843,0.2726899401947033] (2,-1; 2,-1), time: 3.7560s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_95,[-1.258199691772461,1.2855051755905151]=>[-0.7330920485215509,0.6634162923690053] (2,-1; 2,-1), time: 3.9404s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_89,[-1.0949654579162598,0.8513978719711304]=>[-0.5347014241554158,0.5333353993089448] (2,-1; 2,-1), time: 4.6588s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_93,[-1.542258381843567,0.7430838346481323]=>[-0.8799500962092466,0.2769392108716937] (2,-1; 2,-1), time: 4.6347s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_92,[-1.5327531099319458,0.5992647409439087]=>[-1.005899038611056,0.07774912303409634] (2,-1; 2,-1), time: 5.0055s, #vars: 1103, #constrs: 374, improved: True
Solving MIP for lay/input.3_99,[-1.5807287693023682,0.5418565273284912]=>[-1.0417927800193565,0.033307337954167265] (2,-1; 2,-1), time: 5.0426s, #vars: 1103, #constrs: 374, improved: True
PGD done for relu layer 2
MIP improved 90 nodes out of 90 unstable nodes for layer /17, time 23.3743
MIP got 0 timeout nodes out of 90 nodes for layer /17
maximum relu layer improved by MIP so far 1
refine the bounds for layer  /19
sorted candidates [('lay/input.7_0', None, tensor(-1.34644246), tensor(2.29872179)), ('lay/input.7_1', None, tensor(-0.87043750), tensor(2.75592995)), ('lay/input.7_2', None, tensor(-2.34307575), tensor(1.14812040)), ('lay/input.7_3', None, tensor(-2.56406212), tensor(1.48889804)), ('lay/input.7_4', None, tensor(-1.92049193), tensor(1.34744084)), ('lay/input.7_5', None, tensor(-1.32983899), tensor(2.11299181)), ('lay/input.7_6', None, tensor(-1.25462842), tensor(1.63259470)), ('lay/input.7_7', None, tensor(-2.48364067), tensor(1.23075128)), ('lay/input.7_8', None, tensor(-2.58980727), tensor(1.24591196)), ('lay/input.7_9', None, tensor(-2.31427193), tensor(0.75009358)), ('lay/input.7_10', None, tensor(-1.74313974), tensor(1.83336639)), ('lay/input.7_11', None, tensor(-1.83616948), tensor(2.36931348)), ('lay/input.7_12', None, tensor(-1.99632311), tensor(1.84215856)), ('lay/input.7_13', None, tensor(-2.15006900), tensor(1.69560039)), ('lay/input.7_14', None, tensor(-1.87121511), tensor(1.97008753)), ('lay/input.7_15', None, tensor(-1.38333058), tensor(2.72916985)), ('lay/input.7_16', None, tensor(-1.75497723), tensor(1.75421524)), ('lay/input.7_17', None, tensor(-2.08638620), tensor(1.45163727)), ('lay/input.7_18', None, tensor(-1.61752963), tensor(1.43127942)), ('lay/input.7_19', None, tensor(-1.21869981), tensor(2.02736235)), ('lay/input.7_20', None, tensor(-2.39557981), tensor(0.99401355)), ('lay/input.7_21', None, tensor(-1.54252481), tensor(1.10615587)), ('lay/input.7_22', None, tensor(-1.71212101), tensor(1.29566371)), ('lay/input.7_23', None, tensor(-1.69301188), tensor(1.36525738)), ('lay/input.7_24', None, tensor(-1.17150581), tensor(1.79479611)), ('lay/input.7_25', None, tensor(-1.73968589), tensor(1.85585117)), ('lay/input.7_26', None, tensor(-2.65683603), tensor(0.99051642)), ('lay/input.7_27', None, tensor(-2.48723745), tensor(1.41727948)), ('lay/input.7_28', None, tensor(-1.42910147), tensor(2.79830742)), ('lay/input.7_29', None, tensor(-1.28269148), tensor(1.66440892)), ('lay/input.7_30', None, tensor(-3.29416275), tensor(1.38110697)), ('lay/input.7_31', None, tensor(-2.18979287), tensor(0.78687239)), ('lay/input.7_32', None, tensor(-1.65911138), tensor(2.00206614)), ('lay/input.7_33', None, tensor(-1.52844894), tensor(1.86116612)), ('lay/input.7_34', None, tensor(-2.08918571), tensor(2.54811716)), ('lay/input.7_35', None, tensor(-1.74368334), tensor(1.71693206)), ('lay/input.7_36', None, tensor(-1.52942801), tensor(1.22187221)), ('lay/input.7_37', None, tensor(-1.64129162), tensor(1.94877481)), ('lay/input.7_38', None, tensor(-1.11101794), tensor(1.79058242)), ('lay/input.7_39', None, tensor(-1.15237486), tensor(2.90563178)), ('lay/input.7_40', None, tensor(-1.89765167), tensor(0.93205529)), ('lay/input.7_41', None, tensor(-1.09036016), tensor(2.50593853)), ('lay/input.7_42', None, tensor(-1.38789713), tensor(1.35383284)), ('lay/input.7_43', None, tensor(-1.24973881), tensor(2.15207767)), ('lay/input.7_44', None, tensor(-2.50152564), tensor(1.37861943)), ('lay/input.7_45', None, tensor(-2.03670692), tensor(0.91928536)), ('lay/input.7_46', None, tensor(-2.21575403), tensor(1.29657042)), ('lay/input.7_47', None, tensor(-1.14116144), tensor(3.54809761)), ('lay/input.7_48', None, tensor(-1.64126515), tensor(0.85195339)), ('lay/input.7_49', None, tensor(-1.85116577), tensor(1.64859593)), ('lay/input.7_50', None, tensor(-2.59837151), tensor(1.51171243)), ('lay/input.7_51', None, tensor(-2.23670912), tensor(1.49826264)), ('lay/input.7_52', None, tensor(-2.32919693), tensor(0.63384211)), ('lay/input.7_53', None, tensor(-2.44832492), tensor(1.73460722)), ('lay/input.7_54', None, tensor(-2.01615953), tensor(1.97901857)), ('lay/input.7_55', None, tensor(-1.25420856), tensor(2.70439553)), ('lay/input.7_56', None, tensor(-1.30611002), tensor(2.66352367)), ('lay/input.7_57', None, tensor(-1.62791204), tensor(1.62349331)), ('lay/input.7_58', None, tensor(-2.45615125), tensor(1.51848269)), ('lay/input.7_59', None, tensor(-2.07120061), tensor(3.12342167)), ('lay/input.7_60', None, tensor(-2.47864723), tensor(0.91428030)), ('lay/input.7_61', None, tensor(-2.06983256), tensor(1.54514813)), ('lay/input.7_62', None, tensor(-1.69641662), tensor(0.90307868)), ('lay/input.7_63', None, tensor(-0.77945709), tensor(3.54654479)), ('lay/input.7_64', None, tensor(-1.84790754), tensor(2.08126402)), ('lay/input.7_65', None, tensor(-1.70578647), tensor(1.77911460)), ('lay/input.7_66', None, tensor(-0.67401791), tensor(3.58291173)), ('lay/input.7_67', None, tensor(-1.90943825), tensor(1.36039579)), ('lay/input.7_68', None, tensor(-1.63829148), tensor(1.53401756)), ('lay/input.7_69', None, tensor(-1.90688503), tensor(2.10139847)), ('lay/input.7_70', None, tensor(-2.66538119), tensor(1.00723338)), ('lay/input.7_71', None, tensor(-2.05963087), tensor(1.09930968)), ('lay/input.7_72', None, tensor(-1.79974616), tensor(1.27263999)), ('lay/input.7_73', None, tensor(-1.81221700), tensor(1.82066190)), ('lay/input.7_74', None, tensor(-0.46102643), tensor(4.29777384)), ('lay/input.7_75', None, tensor(-1.87290967), tensor(1.78338647)), ('lay/input.7_76', None, tensor(-1.23100042), tensor(2.84889388)), ('lay/input.7_77', None, tensor(-2.26871276), tensor(1.08020699)), ('lay/input.7_78', None, tensor(-0.87282157), tensor(2.38355875)), ('lay/input.7_79', None, tensor(-2.41711283), tensor(1.57422864)), ('lay/input.7_80', None, tensor(-1.91497838), tensor(0.98636228)), ('lay/input.7_81', None, tensor(-2.10510540), tensor(1.69676876)), ('lay/input.7_82', None, tensor(-2.22361302), tensor(1.43311667)), ('lay/input.7_83', None, tensor(-1.37110734), tensor(1.56047297)), ('lay/input.7_84', None, tensor(-1.33559644), tensor(1.79998803)), ('lay/input.7_85', None, tensor(-1.84854376), tensor(1.41917109)), ('lay/input.7_86', None, tensor(-1.89806724), tensor(0.77593505)), ('lay/input.7_87', None, tensor(-2.10132885), tensor(1.24125576)), ('lay/input.7_88', None, tensor(-1.76027143), tensor(1.40456104)), ('lay/input.7_89', None, tensor(-2.56962013), tensor(1.27172792)), ('lay/input.7_90', None, tensor(-1.29177296), tensor(2.40943050)), ('lay/input.7_91', None, tensor(-2.28892350), tensor(1.19819462)), ('lay/input.7_92', None, tensor(-1.60894310), tensor(1.89973497)), ('lay/input.7_93', None, tensor(-1.76879859), tensor(2.18661046)), ('lay/input.7_94', None, tensor(-1.24309325), tensor(2.97832298)), ('lay/input.7_95', None, tensor(-2.25936174), tensor(0.97053325)), ('lay/input.7_96', None, tensor(-1.02685595), tensor(1.18098271)), ('lay/input.7_97', None, tensor(-2.21106195), tensor(1.57528460)), ('lay/input.7_98', None, tensor(-2.51274180), tensor(1.79934001)), ('lay/input.7_99', None, tensor(-1.98681569), tensor(2.14109254))] filter: 1.0
PGD done for relu layer 3
Run alpha-CROWN after refining relu idx 1
relu layer: 1 has unstable to stable neurons: [(0, 1), (9, -1), (13, 1), (16, -1), (17, -1), (18, -1), (25, 1), (29, 1), (35, -1), (37, -1), (39, -1), (40, -1), (41, -1), (42, -1), (44, -1), (45, -1), (46, 1), (50, 1), (54, 1), (62, -1), (64, -1), (65, 1), (69, 1), (75, -1), (77, -1), (79, -1), (85, 1), (86, -1), (88, 1), (94, 1), (98, 1)]
Solving MIP for lay/input.7_1,[-0.870437502861023,2.755929946899414]=>[1e-05,2.755929946899414] (15,-1; -1,-1), time: 0.8419s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_9,[-2.314271926879883,0.7500935792922974]=>[-2.314271926879883,-1e-05] (-1,-1; 15,-1), time: 4.0057s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_8,[-2.5898072719573975,1.245911955833435]=>[-2.5898072719573975,-1e-05] (-1,-1; 15,-1), time: 6.4355s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_15,[-1.3833305835723877,2.7291698455810547]=>[1e-05,2.7291698455810547] (15,-1; -1,-1), time: 6.7669s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_0,[-1.346442461013794,2.2987217903137207]=>[-0.33552658752750475,1.0529493545837452] (9,-1; 9,-1), time: 30.0153s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_2,[-2.343075752258301,1.148120403289795]=>[-1.196238125099929,0.0865001240739553] (9,-1; 9,-1), time: 30.0150s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_4,[-1.9204919338226318,1.3474408388137817]=>[-0.9306488054699826,0.3125927403549954] (9,-1; 9,-1), time: 30.0122s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_3,[-2.5640621185302734,1.4888980388641357]=>[-1.4040482378054167,0.08925964174681456] (9,-1; 9,-1), time: 30.0148s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_7,[-2.483640670776367,1.2307512760162354]=>[-1.2904662484402105,0.2283410782426786] (9,-1; 9,-1), time: 30.0143s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_10,[-1.7431397438049316,1.8333663940429688]=>[-0.7281257730711547,0.6053929602727854] (9,-1; 9,-1), time: 30.0140s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_6,[-1.2546284198760986,1.6325947046279907]=>[-0.18828538250158466,0.896123569927567] (9,-1; 9,-1), time: 30.0164s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_14,[-1.8712151050567627,1.9700875282287598]=>[-0.5710676874367488,0.9583969970615877] (9,-1; 9,-1), time: 30.0118s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_11,[-1.8361694812774658,2.3693134784698486]=>[-0.45551795960601926,1.3175938423808318] (9,-1; 9,-1), time: 30.0135s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_13,[-2.150068998336792,1.6956003904342651]=>[-0.9595406153199885,0.5974021545896009] (9,-1; 9,-1), time: 30.0138s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_12,[-1.9963231086730957,1.842158555984497]=>[-0.7885446220238298,0.7520254354299979] (9,-1; 9,-1), time: 30.0162s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_5,[-1.3298389911651611,2.1129918098449707]=>[-0.09574697090670425,1.271410208226889] (9,-1; 9,-1), time: 30.0269s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_16,[-1.7549772262573242,1.7542152404785156]=>[-0.6412701062504649,0.7901933566806929] (9,-1; 9,-1), time: 30.0090s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_17,[-2.086386203765869,1.4516372680664062]=>[-1.059416870304892,0.39619904385588134] (9,-1; 9,-1), time: 30.0095s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_26,[-2.6568360328674316,0.9905164241790771]=>[-2.6568360328674316,-1e-05] (-1,-1; 15,-1), time: 4.0750s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_19,[-1.2186998128890991,2.02736234664917]=>[-0.0011080560266415612,1.2342829181816515] (9,-1; 2,-1), time: 27.3541s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_20,[-2.3955798149108887,0.9940135478973389]=>[-2.3955798149108887,-1e-05] (-1,-1; 15,-1), time: 5.0456s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_30,[-3.2941627502441406,1.381106972694397]=>[-3.2941627502441406,-1e-05] (-1,-1; 15,-1), time: 5.6702s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_31,[-2.1897928714752197,0.786872386932373]=>[-2.1897928714752197,-1e-05] (-1,-1; 15,-1), time: 6.1655s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_18,[-1.6175296306610107,1.4312794208526611]=>[-0.5961756281495875,0.4684562506016938] (9,-1; 9,-1), time: 30.0231s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_32,[-1.6591113805770874,2.002066135406494]=>[-0.42325527238229854,1.0472568552618016] (9,-1; 2,-1), time: 20.6530s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_24,[-1.1715058088302612,1.794796109199524]=>[-0.06290713212334642,1.1211359370322553] (9,-1; 9,-1), time: 30.0107s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_23,[-1.6930118799209595,1.3652573823928833]=>[-0.5400913207170175,0.5745821702080935] (9,-1; 9,-1), time: 30.0219s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_25,[-1.7396858930587769,1.855851173400879]=>[-0.5153235223667434,0.8330910292163587] (9,-1; 9,-1), time: 30.0106s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_21,[-1.542524814605713,1.1061558723449707]=>[-0.46612982187651086,0.4686312793594382] (9,-1; 9,-1), time: 30.0379s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_22,[-1.7121210098266602,1.2956637144088745]=>[-0.63995216860419,0.474852933686019] (9,-1; 9,-1), time: 30.0325s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_27,[-2.4872374534606934,1.4172794818878174]=>[-1.219249768931012,0.2406326239481511] (9,-1; 9,-1), time: 30.0129s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_28,[-1.4291014671325684,2.798307418823242]=>[-0.16872607654256494,1.6783045037316195] (9,-1; 9,-1), time: 30.0148s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_29,[-1.282691478729248,1.6644089221954346]=>[-0.2432532566297757,0.853006950930888] (9,-1; 9,-1), time: 30.0154s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_47,[-1.1411614418029785,3.548097610473633]=>[1e-05,3.548097610473633] (15,-1; -1,-1), time: 0.7417s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_41,[-1.090360164642334,2.5059385299682617]=>[1e-05,2.5059385299682617] (15,-1; -1,-1), time: 1.0418s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_33,[-1.5284489393234253,1.8611661195755005]=>[-0.3472585964956914,0.946484156866825] (9,-1; 9,-1), time: 30.0190s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_34,[-2.0891857147216797,2.548117160797119]=>[-0.6661564924472357,1.094500270145229] (9,-1; 9,-1), time: 30.0123s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_35,[-1.7436833381652832,1.7169320583343506]=>[-0.6988421030856485,0.6523831098078248] (9,-1; 9,-1), time: 30.0132s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_36,[-1.5294280052185059,1.2218722105026245]=>[-0.6378740658089457,0.4237740476250332] (9,-1; 9,-1), time: 30.0093s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_52,[-2.3291969299316406,0.6338421106338501]=>[-2.3291969299316406,-1e-05] (-1,-1; 15,-1), time: 1.1816s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_37,[-1.641291618347168,1.948774814605713]=>[-0.5815879946884132,0.8139491341828142] (9,-1; 9,-1), time: 30.0242s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_38,[-1.1110179424285889,1.7905824184417725]=>[-0.018290099372553464,1.0846246065585439] (9,-1; 9,-1), time: 30.0105s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_39,[-1.1523748636245728,2.9056317806243896]=>[-0.05977076716489191,1.534025175195237] (9,-1; 9,-1), time: 30.0085s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_55,[-1.2542085647583008,2.7043955326080322]=>[1e-05,2.7043955326080322] (15,-1; -1,-1), time: 4.8462s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_56,[-1.3061100244522095,2.6635236740112305]=>[1e-05,2.6635236740112305] (15,-1; -1,-1), time: 14.4722s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_40,[-1.8976516723632812,0.9320552945137024]=>[-0.9359549195389755,0.09009033688426545] (9,-1; 9,-1), time: 30.0077s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_42,[-1.3878971338272095,1.3538328409194946]=>[-0.4436218040529818,0.519598162090888] (9,-1; 9,-1), time: 30.0128s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_43,[-1.2497388124465942,2.1520776748657227]=>[-0.12084495518179948,1.2394653998693426] (9,-1; 9,-1), time: 30.0109s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_44,[-2.501525640487671,1.3786194324493408]=>[-1.3733035350881662,0.04170621587436766] (9,-1; 9,-1), time: 30.0127s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_46,[-2.2157540321350098,1.2965704202651978]=>[-1.045854723123116,0.26649752044281644] (9,-1; 9,-1), time: 30.0112s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_45,[-2.0367069244384766,0.9192853569984436]=>[-0.9698128904187994,0.09334501854572631] (9,-1; 9,-1), time: 30.0212s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_48,[-1.6412651538848877,0.851953387260437]=>[-0.5780567710414143,0.24888795919918574] (9,-1; 9,-1), time: 30.0210s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_63,[-0.7794570922851562,3.5465447902679443]=>[1e-05,3.5465447902679443] (15,-1; -1,-1), time: 0.1347s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_66,[-0.6740179061889648,3.582911729812622]=>[1e-05,3.582911729812622] (15,-1; -1,-1), time: 0.1279s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_49,[-1.851165771484375,1.648595929145813]=>[-0.809506159645833,0.51597101571597] (9,-1; 9,-1), time: 30.0109s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_50,[-2.5983715057373047,1.5117124319076538]=>[-1.2667265045560965,0.30629329993353427] (9,-1; 9,-1), time: 30.0096s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_51,[-2.2367091178894043,1.498262643814087]=>[-1.0307105779271393,0.311730884040663] (9,-1; 9,-1), time: 30.0182s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_53,[-2.4483249187469482,1.734607219696045]=>[-1.2481695466425091,0.4584387050851597] (9,-1; 9,-1), time: 30.0077s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_54,[-2.0161595344543457,1.9790185689926147]=>[-0.7360049616755365,0.8231046892121088] (9,-1; 9,-1), time: 30.0083s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_74,[-0.4610264301300049,4.297773838043213]=>[1e-05,4.297773838043213] (15,-1; -1,-1), time: 0.1152s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_70,[-2.6653811931610107,1.0072333812713623]=>[-2.6653811931610107,-1e-05] (-1,-1; 15,-1), time: 4.3962s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_57,[-1.6279120445251465,1.6234933137893677]=>[-0.647351239518076,0.5331948799447964] (9,-1; 9,-1), time: 30.0100s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_58,[-2.456151247024536,1.5184826850891113]=>[-1.1712146922331095,0.3329004456813198] (9,-1; 9,-1), time: 30.0138s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_78,[-0.872821569442749,2.383558750152588]=>[1e-05,2.383558750152588] (15,-1; -1,-1), time: 1.0876s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_59,[-2.0712006092071533,3.1234216690063477]=>[-0.8026959349444656,1.6763528541503987] (9,-1; 9,-1), time: 30.0170s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_60,[-2.478647232055664,0.9142802953720093]=>[-1.3604835558691963,0.061320449697129575] (9,-1; 9,-1), time: 30.0101s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_61,[-2.0698325634002686,1.5451481342315674]=>[-0.9924786516649919,0.3485800713148178] (9,-1; 9,-1), time: 30.0079s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_62,[-1.6964166164398193,0.9030786752700806]=>[-0.6929002788870224,0.285822602711275] (9,-1; 9,-1), time: 30.0148s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_64,[-1.847907543182373,2.081264019012451]=>[-0.5156647052692935,1.0185585128110843] (9,-1; 9,-1), time: 30.0138s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_65,[-1.7057864665985107,1.7791146039962769]=>[-0.5532963737117774,0.6920021736876136] (9,-1; 9,-1), time: 30.0136s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_67,[-1.9094382524490356,1.3603957891464233]=>[-0.8572614844473805,0.49009487040740385] (9,-1; 9,-1), time: 30.0140s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_68,[-1.6382914781570435,1.534017562866211]=>[-0.591990212214949,0.6414177499651086] (9,-1; 9,-1), time: 30.0100s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_69,[-1.906885027885437,2.101398468017578]=>[-0.6129574951128722,0.9518668858141802] (9,-1; 9,-1), time: 30.0099s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_71,[-2.059630870819092,1.0993096828460693]=>[-0.7648339664343384,0.3307191418519888] (9,-1; 9,-1), time: 30.0091s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_72,[-1.7997461557388306,1.2726399898529053]=>[-0.6751180336340937,0.4578439051940908] (9,-1; 9,-1), time: 30.0207s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_73,[-1.8122169971466064,1.8206619024276733]=>[-0.8238959648624853,0.6367245545720434] (9,-1; 9,-1), time: 30.0163s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_75,[-1.872909665107727,1.783386468887329]=>[-0.8251177116355298,0.5624716360060077] (9,-1; 9,-1), time: 30.0078s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_76,[-1.2310004234313965,2.848893880844116]=>[-0.018399976692683614,1.6059557312616266] (9,-1; 9,-1), time: 30.0104s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_77,[-2.2687127590179443,1.0802069902420044]=>[-1.102136748875805,0.19303497039462453] (9,-1; 9,-1), time: 30.0106s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_79,[-2.4171128273010254,1.5742286443710327]=>[-0.9802899046814222,0.44559676291778966] (9,-1; 9,-1), time: 30.0081s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_94,[-1.2430932521820068,2.978322982788086]=>[1e-05,2.978322982788086] (15,-1; -1,-1), time: 3.6942s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_80,[-1.9149783849716187,0.9863622784614563]=>[-0.8835949837369593,0.1813020267911539] (9,-1; 9,-1), time: 30.0168s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_81,[-2.105105400085449,1.6967687606811523]=>[-1.017364067768367,0.4603889128339522] (9,-1; 9,-1), time: 30.0098s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_82,[-2.2236130237579346,1.4331166744232178]=>[-0.999000512552534,0.465164524642579] (9,-1; 9,-1), time: 30.0081s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_83,[-1.3711073398590088,1.5604729652404785]=>[-0.35332493286913563,0.8205847876224381] (9,-1; 9,-1), time: 30.0082s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_84,[-1.3355964422225952,1.799988031387329]=>[-0.3697017705445059,0.8135993117511195] (9,-1; 9,-1), time: 30.0089s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_85,[-1.8485437631607056,1.4191710948944092]=>[-0.557431860126225,0.6830261625544689] (9,-1; 9,-1), time: 30.0094s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_86,[-1.8980672359466553,0.7759350538253784]=>[-0.9825357012165394,0.0682806931495815] (9,-1; 9,-1), time: 30.0153s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_87,[-2.1013288497924805,1.241255760192871]=>[-0.9831615224146321,0.33949963777317155] (9,-1; 9,-1), time: 30.0085s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_88,[-1.760271430015564,1.4045610427856445]=>[-0.6519035715901298,0.45413634647431883] (9,-1; 9,-1), time: 30.0086s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_89,[-2.569620132446289,1.2717279195785522]=>[-1.49894181020521,0.026666504154053007] (9,-1; 9,-1), time: 30.0085s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_90,[-1.2917729616165161,2.409430503845215]=>[-0.01608723244629171,1.3235606356198426] (9,-1; 9,-1), time: 30.0093s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_91,[-2.288923501968384,1.1981946229934692]=>[-1.1387664932693182,0.209200734241732] (9,-1; 9,-1), time: 30.0189s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_92,[-1.6089431047439575,1.8997349739074707]=>[-0.4060442815662911,0.9596278568326709] (9,-1; 9,-1), time: 30.0073s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_93,[-1.768798589706421,2.186610460281372]=>[-0.5998502856065369,0.8916745379877971] (9,-1; 9,-1), time: 30.0144s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_95,[-2.259361743927002,0.9705332517623901]=>[-1.1554572686716034,0.06650470692628702] (9,-1; 9,-1), time: 30.0102s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_96,[-1.0268559455871582,1.1809827089309692]=>[-0.3732584513236206,0.4036435069578405] (9,-1; 9,-1), time: 30.0097s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_97,[-2.211061954498291,1.5752846002578735]=>[-0.9949285993442469,0.4302919587596755] (9,-1; 9,-1), time: 30.0099s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_98,[-2.512741804122925,1.799340009689331]=>[-1.2380891568193542,0.46549047110489494] (9,-1; 9,-1), time: 30.0083s, #vars: 1321, #constrs: 651, improved: True
Solving MIP for lay/input.7_99,[-1.9868156909942627,2.141092538833618]=>[-0.9429816793721688,0.7680944247750128] (9,-1; 9,-1), time: 30.0085s, #vars: 1321, #constrs: 651, improved: True
best_l after optimization: -243.75184631347656
beta sum per layer: []
alpha/beta optimization time: 5.9506995677948
alpha-CROWN with intermediate bounds by MIP: tensor([[-27.71302223, -26.80447388, -27.38512611, -28.03980827, -28.25076866,
         -21.72413445, -24.73427963, -26.98278999, -32.11745453]],
       device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes for layer /19, time 172.6282
MIP got 79 timeout nodes out of 100 nodes for layer /19
maximum relu layer improved by MIP so far 2
refine the bounds for layer  /21
sorted candidates [('lay/input.11_0', None, tensor(-3.51356506), tensor(2.83105302)), ('lay/input.11_1', None, tensor(-3.69017148), tensor(3.14784050)), ('lay/input.11_2', None, tensor(-3.51830077), tensor(2.83380699)), ('lay/input.11_3', None, tensor(-3.52924395), tensor(4.37240124)), ('lay/input.11_4', None, tensor(-3.72832060), tensor(2.94789076)), ('lay/input.11_5', None, tensor(-3.37650204), tensor(3.15482688)), ('lay/input.11_6', None, tensor(-3.64458990), tensor(3.51738667)), ('lay/input.11_7', None, tensor(-4.94135332), tensor(4.27171373)), ('lay/input.11_8', None, tensor(-3.60816431), tensor(3.92922139)), ('lay/input.11_9', None, tensor(-4.20572472), tensor(2.56876206)), ('lay/input.11_10', None, tensor(-4.10283184), tensor(3.34256411)), ('lay/input.11_11', None, tensor(-3.44323421), tensor(3.20000958)), ('lay/input.11_12', None, tensor(-4.48343277), tensor(3.97279429)), ('lay/input.11_13', None, tensor(-3.78195858), tensor(3.24923468)), ('lay/input.11_14', None, tensor(-3.42114353), tensor(4.05079651)), ('lay/input.11_15', None, tensor(-3.03391314), tensor(5.31187725)), ('lay/input.11_16', None, tensor(-3.65233135), tensor(3.28554320)), ('lay/input.11_17', None, tensor(-3.51541090), tensor(4.33823013)), ('lay/input.11_18', None, tensor(-4.15601730), tensor(3.71767020)), ('lay/input.11_19', None, tensor(-3.94931149), tensor(4.14497614)), ('lay/input.11_20', None, tensor(-3.43563676), tensor(2.79221344)), ('lay/input.11_21', None, tensor(-3.96015263), tensor(4.28788805)), ('lay/input.11_22', None, tensor(-3.34102035), tensor(3.81151628)), ('lay/input.11_23', None, tensor(-4.79915428), tensor(3.60983419)), ('lay/input.11_24', None, tensor(-3.80210662), tensor(2.66257191)), ('lay/input.11_25', None, tensor(-4.84583759), tensor(2.60356665)), ('lay/input.11_26', None, tensor(-4.03544044), tensor(4.92671585)), ('lay/input.11_27', None, tensor(-4.14390850), tensor(2.60036230)), ('lay/input.11_28', None, tensor(-2.94532490), tensor(5.61247110)), ('lay/input.11_29', None, tensor(-3.98329329), tensor(3.60325861)), ('lay/input.11_30', None, tensor(-3.67891145), tensor(4.29140186)), ('lay/input.11_31', None, tensor(-3.34873176), tensor(5.64433765)), ('lay/input.11_32', None, tensor(-4.00485516), tensor(2.61100507)), ('lay/input.11_33', None, tensor(-3.30868030), tensor(4.21151161)), ('lay/input.11_34', None, tensor(-2.95040298), tensor(5.48635626)), ('lay/input.11_35', None, tensor(-3.41410398), tensor(3.54048753)), ('lay/input.11_36', None, tensor(-3.67478585), tensor(3.60078430)), ('lay/input.11_37', None, tensor(-3.35607386), tensor(3.64231801)), ('lay/input.11_38', None, tensor(-2.99862313), tensor(6.86280155)), ('lay/input.11_39', None, tensor(-3.31056929), tensor(4.64734364)), ('lay/input.11_40', None, tensor(-3.33545923), tensor(2.67611217)), ('lay/input.11_41', None, tensor(-3.82235909), tensor(2.64698315)), ('lay/input.11_42', None, tensor(-3.95284081), tensor(3.40912390)), ('lay/input.11_43', None, tensor(-2.96939087), tensor(5.61218452)), ('lay/input.11_44', None, tensor(-4.93093300), tensor(2.72375846)), ('lay/input.11_45', None, tensor(-3.61271000), tensor(3.19250679)), ('lay/input.11_46', None, tensor(-3.48585129), tensor(3.04476786)), ('lay/input.11_47', None, tensor(-3.79798841), tensor(4.60772419)), ('lay/input.11_48', None, tensor(-3.99429631), tensor(3.29081297)), ('lay/input.11_49', None, tensor(-4.18447447), tensor(3.58776140)), ('lay/input.11_50', None, tensor(-3.15006423), tensor(3.83848238)), ('lay/input.11_51', None, tensor(-3.30190611), tensor(4.71191835)), ('lay/input.11_52', None, tensor(-4.30369854), tensor(3.00613475)), ('lay/input.11_53', None, tensor(-3.01896310), tensor(4.27538586)), ('lay/input.11_54', None, tensor(-3.43629146), tensor(4.33570910)), ('lay/input.11_55', None, tensor(-4.29804564), tensor(3.15781379)), ('lay/input.11_56', None, tensor(-3.84789371), tensor(2.93232846)), ('lay/input.11_57', None, tensor(-4.11725235), tensor(5.37186003)), ('lay/input.11_58', None, tensor(-3.95409012), tensor(4.12628174)), ('lay/input.11_59', None, tensor(-3.37420416), tensor(3.93708801)), ('lay/input.11_60', None, tensor(-4.12304401), tensor(2.88276625)), ('lay/input.11_61', None, tensor(-3.57307673), tensor(3.22238040)), ('lay/input.11_62', None, tensor(-4.83850002), tensor(3.28780961)), ('lay/input.11_63', None, tensor(-4.67301178), tensor(5.17033195)), ('lay/input.11_64', None, tensor(-3.03181553), tensor(3.42025495)), ('lay/input.11_65', None, tensor(-3.04952765), tensor(4.09240532)), ('lay/input.11_66', None, tensor(-3.55908179), tensor(4.12453079)), ('lay/input.11_67', None, tensor(-4.75462294), tensor(4.16440153)), ('lay/input.11_68', None, tensor(-3.26643991), tensor(3.71813631)), ('lay/input.11_69', None, tensor(-3.23948383), tensor(3.55281091)), ('lay/input.11_70', None, tensor(-4.22944021), tensor(2.90603662)), ('lay/input.11_71', None, tensor(-3.70901752), tensor(2.87121654)), ('lay/input.11_72', None, tensor(-5.00619173), tensor(4.85167074)), ('lay/input.11_73', None, tensor(-2.92596507), tensor(5.20623922)), ('lay/input.11_74', None, tensor(-3.74701142), tensor(5.38810444)), ('lay/input.11_75', None, tensor(-3.44152093), tensor(4.03552103)), ('lay/input.11_76', None, tensor(-3.97194242), tensor(4.29429913)), ('lay/input.11_77', None, tensor(-3.85687947), tensor(2.56944990)), ('lay/input.11_78', None, tensor(-4.04070616), tensor(2.88453889)), ('lay/input.11_79', None, tensor(-4.13923454), tensor(3.01089430)), ('lay/input.11_80', None, tensor(-4.35469961), tensor(3.45989633)), ('lay/input.11_81', None, tensor(-4.18502808), tensor(4.68880177)), ('lay/input.11_82', None, tensor(-4.54086351), tensor(3.56104612)), ('lay/input.11_83', None, tensor(-3.70197201), tensor(3.34937191)), ('lay/input.11_84', None, tensor(-3.64786100), tensor(3.15205002)), ('lay/input.11_85', None, tensor(-4.46384573), tensor(3.06719112)), ('lay/input.11_86', None, tensor(-4.33023977), tensor(3.82823396)), ('lay/input.11_87', None, tensor(-3.94168687), tensor(5.31116104)), ('lay/input.11_88', None, tensor(-3.54384637), tensor(4.43159342)), ('lay/input.11_89', None, tensor(-3.98640180), tensor(2.59704757)), ('lay/input.11_90', None, tensor(-4.81370163), tensor(4.83002663)), ('lay/input.11_91', None, tensor(-3.91556978), tensor(2.80943871)), ('lay/input.11_92', None, tensor(-3.51970243), tensor(3.92647457)), ('lay/input.11_93', None, tensor(-4.09802675), tensor(3.01865053)), ('lay/input.11_94', None, tensor(-3.28463030), tensor(3.20413113)), ('lay/input.11_95', None, tensor(-3.97356534), tensor(3.76594305)), ('lay/input.11_96', None, tensor(-3.02769113), tensor(4.48254299)), ('lay/input.11_97', None, tensor(-3.92867732), tensor(1.97011757)), ('lay/input.11_98', None, tensor(-3.94637227), tensor(3.57272291)), ('lay/input.11_99', None, tensor(-5.04304743), tensor(1.90440071))] filter: 1.0
PGD done for relu layer 4
Run alpha-CROWN after refining relu idx 2
relu layer: 2 has unstable to stable neurons: [(1, 1), (8, -1), (9, -1), (15, 1), (20, -1), (26, -1), (30, -1), (31, -1), (41, 1), (47, 1), (52, -1), (55, 1), (56, 1), (63, 1), (66, 1), (70, -1), (74, 1), (78, 1), (94, 1)]
Solving MIP for lay/input.11_15,[-3.0339131355285645,5.311877250671387]=>[1e-05,5.311877250671387] (15,-1; -1,-1), time: 8.6863s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_0,[-3.5135650634765625,2.8310530185699463]=>[-1.3552968748060477,0.4770219772464554] (9,-1; 9,-1), time: 30.0400s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_10,[-4.102831840515137,3.342564105987549]=>[-1.1975259586579459,0.8851818545471681] (9,-1; 9,-1), time: 30.0156s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_12,[-4.483432769775391,3.9727942943573]=>[-1.55311290652456,0.8040004998721565] (9,-1; 9,-1), time: 30.0141s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_3,[-3.5292439460754395,4.372401237487793]=>[-1.0389350978267857,1.1122682412746385] (9,-1; 9,-1), time: 30.0213s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_5,[-3.37650203704834,3.1548268795013428]=>[-0.8839610765256932,0.7446052052339146] (9,-1; 9,-1), time: 30.0375s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_11,[-3.4432342052459717,3.20000958442688]=>[-0.6952524305736163,0.9824517127766053] (9,-1; 9,-1), time: 30.0388s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_14,[-3.4211435317993164,4.0507965087890625]=>[-1.1246257897592704,0.7771778919822899] (9,-1; 9,-1), time: 30.0617s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_6,[-3.644589900970459,3.5173866748809814]=>[-0.8576678821310122,1.146555555620906] (9,-1; 9,-1), time: 30.0821s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_4,[-3.728320598602295,2.9478907585144043]=>[-0.7653300213387881,0.9642129040855197] (9,-1; 9,-1), time: 30.1197s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_8,[-3.6081643104553223,3.9292213916778564]=>[-0.8861009600279369,1.2309607484856133] (9,-1; 9,-1), time: 30.1264s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_1,[-3.690171480178833,3.1478404998779297]=>[-1.3463339359653301,0.7147503348580294] (9,-1; 9,-1), time: 30.1685s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_9,[-4.205724716186523,2.5687620639801025]=>[-1.4827010511201397,0.2950831399175526] (9,-1; 9,-1), time: 30.1565s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_7,[-4.9413533210754395,4.271713733673096]=>[-1.9666967895550262,0.671323790450757] (9,-1; 9,-1), time: 30.2831s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_2,[-3.518300771713257,2.8338069915771484]=>[-1.5153985587886718,0.330263684420835] (9,-1; 9,-1), time: 30.3453s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_13,[-3.78195858001709,3.249234676361084]=>[-1.42012643373164,0.5881740795378626] (9,-1; 9,-1), time: 30.3755s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_28,[-2.9453248977661133,5.612471103668213]=>[1e-05,5.612471103668213] (15,-1; -1,-1), time: 1.0709s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_31,[-3.348731756210327,5.6443376541137695]=>[1e-05,5.6443376541137695] (15,-1; -1,-1), time: 2.8134s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_16,[-3.6523313522338867,3.285543203353882]=>[-0.7960980914575535,0.9202245069148796] (9,-1; 9,-1), time: 30.0188s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_34,[-2.9504029750823975,5.486356258392334]=>[1e-05,5.486356258392334] (15,-1; -1,-1), time: 1.6714s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_18,[-4.156017303466797,3.717670202255249]=>[-1.2085699461137405,1.034177734686409] (9,-1; 9,-1), time: 30.0212s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_19,[-3.9493114948272705,4.1449761390686035]=>[-0.4069995929400651,1.7782063745150183] (9,-1; 9,-1), time: 30.0198s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_20,[-3.4356367588043213,2.7922134399414062]=>[-1.0743849868213275,0.5860216397397842] (9,-1; 9,-1), time: 30.0681s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_26,[-4.035440444946289,4.926715850830078]=>[-0.8245569264025048,1.9018981044079424] (9,-1; 9,-1), time: 30.0099s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_27,[-4.143908500671387,2.6003623008728027]=>[-1.3631598413134964,0.40936978699728527] (9,-1; 9,-1), time: 30.0192s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_24,[-3.8021066188812256,2.662571907043457]=>[-1.4387608705265196,0.3822984944298488] (9,-1; 9,-1), time: 30.1487s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_22,[-3.341020345687866,3.811516284942627]=>[-0.41968749080134515,1.6128534999263302] (9,-1; 9,-1), time: 30.2182s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_25,[-4.845837593078613,2.6035666465759277]=>[-1.8450980476779961,0.2633611727766305] (9,-1; 9,-1), time: 30.1505s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_23,[-4.799154281616211,3.6098341941833496]=>[-2.4189486960225346,0.28741078138639686] (9,-1; 9,-1), time: 30.2666s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_17,[-3.515410900115967,4.338230133056641]=>[-1.2541660155377206,1.1673981303516021] (9,-1; 9,-1), time: 30.3724s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_29,[-3.983293294906616,3.6032586097717285]=>[-1.4320030961365682,0.7930471819354336] (9,-1; 9,-1), time: 30.3521s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_21,[-3.9601526260375977,4.287888050079346]=>[-1.3444505634004453,0.8606463309169524] (9,-1; 9,-1), time: 30.7968s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_30,[-3.6789114475250244,4.2914018630981445]=>[-0.9877601161998928,1.1022788821496203] (9,-1; 9,-1), time: 30.6970s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_32,[-4.004855155944824,2.6110050678253174]=>[-1.2482304099687858,0.6365789797285442] (9,-1; 9,-1), time: 30.4390s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_33,[-3.308680295944214,4.211511611938477]=>[-0.2904711224958381,1.972684757629239] (9,-1; 9,-1), time: 30.0469s, #vars: 1583, #constrs: 994, improved: True
Solving MIP for lay/input.11_35,[-3.4141039848327637,3.54048752784729]=>[-0.6736536826397426,1.0732449921559977] (9,-1; 9,-1), time: 30.0086s, #vars: 1583, #constrs: 994, improved: True
best_l after optimization: -155.3974151611328
beta sum per layer: []
alpha/beta optimization time: 5.2234275341033936
alpha-CROWN with intermediate bounds by MIP: tensor([[-17.30862808, -17.28984261, -17.52908516, -17.74920654, -18.21554184,
         -13.59470177, -15.85916328, -17.43921471, -20.41203308]],
       device='cuda:0') None
MIP improved 36 nodes out of 100 unstable nodes for layer /21, time 71.5815
MIP got 32 timeout nodes out of 100 nodes for layer /21
MIP finished with 267.9700381755829s
Run final alpha-CROWN after MIP solving on layer 11 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: -142.8376007080078
beta sum per layer: []
alpha/beta optimization time: 6.055751085281372
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-15.70846748, -15.96245956, -16.20903778, -16.24996185, -16.81070137,
         -12.38072777, -14.66168213, -16.12537384, -18.72919464]],
       device='cuda:0') None
refined global lb: tensor([[-15.70846748],
        [-15.96245956],
        [-16.20903778],
        [-16.24996185],
        [-16.81070137],
        [-12.38072777],
        [-14.66168213],
        [-16.12537384],
        [-18.72919464]], device='cuda:0') min: tensor(-18.72919464, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 100]), torch.Size([9, 1, 100]), torch.Size([9, 1, 100]), torch.Size([9, 1, 100]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 17.86359977722168
##### Instance 2 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-15.70846748]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.36013126,  7.92522287,  1.01381636, -2.30793953,  0.63591421,
        -1.90936446, -1.59363687,  0.66697335,  1.02538371, -1.86717057],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /15 start_node /24 with alignment adjustment
setting alpha for layer /17 start_node /24 with alignment adjustment
setting alpha for layer /19 start_node /24 with alignment adjustment
setting alpha for layer /21 start_node /24 with alignment adjustment
setting alpha for layer /23 start_node /24 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-15.70846748]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.3,/input.7,/input.11,/input.15,/24
Keeping alphas for these layers: ['/24']
Keeping alphas for these layers: ['/24']
Node /15 input 0: size torch.Size([100]) unstable 58
Node /17 input 0: size torch.Size([100]) unstable 59
Node /19 input 0: size torch.Size([100]) unstable 81
Node /21 input 0: size torch.Size([100]) unstable 96
Node /23 input 0: size torch.Size([100]) unstable 100
-----------------
# of unstable neurons: 394
-----------------

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input.15, 2] 
split level 1: [/input.15, 34] 
split level 2: [/input.15, 11] 
split level 3: [/input.15, 49] 
split level 4: [/input.15, 24] 
split level 5: [/input.15, 17] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 8.606910705566406e-05
Time: prepare 0.1588    bound 0.5421    transfer 0.0003    finalize 0.0070    func 0.7083    
Accumulated time: func 0.7083    prepare 0.1595    bound 0.5421    transfer 0.0003    finalize 0.0070    
Current worst splitting domains lb-rhs (depth):
-13.48696 (6), -13.41364 (6), -13.39953 (6), -13.38018 (6), -13.25307 (6), -13.15289 (6), -13.14479 (6), -13.07202 (6), -12.97454 (6), -12.93480 (6), -12.88997 (6), -12.85258 (6), -12.81140 (6), -12.81035 (6), -12.76846 (6), -12.72173 (6), -12.71467 (6), -12.56668 (6), -12.48429 (6), -12.47560 (6), 
Length of domains: 64
Time: pickout 0.0010    decision 0.3467    set_bounds 0.0073    solve 0.7084    add 0.0035    
Accumulated time: pickout 0.0010    decision 0.3467    set_bounds 0.0073    solve 0.7084    add 0.0035    
Current (lb-rhs): -13.486956596374512
64 domains visited
Cumulative time: 1.0969066619873047

BaB round 2
batch: 64
splitting decisions: 
split level 0: [/input.15, 13] [/input.15, 45] [/input.15, 45] [/input.15, 45] [/input.15, 13] [/input.15, 13] [/input.15, 13] [/input.15, 45] [/input.15, 13] [/input.15, 45] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.0003952980041503906
Time: prepare 0.0879    bound 0.2527    transfer 0.0005    finalize 0.0137    func 0.3549    
Accumulated time: func 1.0632    prepare 0.2477    bound 0.7948    transfer 0.0008    finalize 0.0207    
Current worst splitting domains lb-rhs (depth):
-13.00798 (7), -12.95873 (7), -12.95363 (7), -12.92984 (7), -12.74350 (7), -12.65630 (7), -12.57105 (7), -12.52458 (7), -12.46993 (7), -12.41411 (7), -12.37972 (7), -12.37354 (7), -12.36975 (7), -12.36704 (7), -12.34868 (7), -12.33191 (7), -12.31198 (7), -12.30807 (7), -12.27685 (7), -12.25070 (7), 
Length of domains: 128
Time: pickout 0.0010    decision 0.0413    set_bounds 0.0058    solve 0.3549    add 0.0035    
Accumulated time: pickout 0.0020    decision 0.3880    set_bounds 0.0130    solve 1.0633    add 0.0069    
Current (lb-rhs): -13.007979393005371
192 domains visited
Cumulative time: 1.5038628578186035

BaB round 3
batch: 128
splitting decisions: 
split level 0: [/input.15, 43] [/input.15, 13] [/input.15, 43] [/input.15, 36] [/input.15, 43] [/input.15, 45] [/input.15, 45] [/input.15, 13] [/input.15, 45] [/input.15, 13] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 9.799003601074219e-05
Time: prepare 0.1417    bound 0.2684    transfer 0.0005    finalize 0.0276    func 0.4384    
Accumulated time: func 1.5016    prepare 0.3896    bound 1.0632    transfer 0.0013    finalize 0.0484    
Current worst splitting domains lb-rhs (depth):
-12.53131 (8), -12.47543 (8), -12.47460 (8), -12.46688 (8), -12.26455 (8), -12.21923 (8), -12.18419 (8), -12.17697 (8), -12.14109 (8), -12.12720 (8), -12.08947 (8), -12.03028 (8), -12.02220 (8), -11.95709 (8), -11.95393 (8), -11.91286 (8), -11.87008 (8), -11.83513 (8), -11.82944 (8), -11.82431 (8), 
Length of domains: 256
Time: pickout 0.0011    decision 0.0484    set_bounds 0.0109    solve 0.4384    add 0.0042    
Accumulated time: pickout 0.0031    decision 0.4364    set_bounds 0.0240    solve 1.5017    add 0.0111    
Current (lb-rhs): -12.531307220458984
448 domains visited
Cumulative time: 2.0075435638427734

BaB round 4
batch: 256
splitting decisions: 
split level 0: [/input.15, 45] [/input.15, 36] [/input.15, 36] [/input.15, 13] [/input.15, 45] [/input.15, 36] [/input.15, 43] [/input.15, 36] [/input.15, 36] [/input.15, 36] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 8.702278137207031e-05
Time: prepare 0.2231    bound 0.2399    transfer 0.0004    finalize 0.0567    func 0.5202    
Accumulated time: func 2.0218    prepare 0.6130    bound 1.3031    transfer 0.0017    finalize 0.1051    
Current worst splitting domains lb-rhs (depth):
-12.15177 (9), -12.12811 (9), -12.09996 (9), -12.09590 (9), -11.86376 (9), -11.76479 (9), -11.73921 (9), -11.72189 (9), -11.68576 (9), -11.67896 (9), -11.67729 (9), -11.67144 (9), -11.65626 (9), -11.62553 (9), -11.61255 (9), -11.60968 (9), -11.55117 (9), -11.53673 (9), -11.51594 (9), -11.50961 (9), 
Length of domains: 512
Time: pickout 0.0013    decision 0.0807    set_bounds 0.0212    solve 0.5203    add 0.0050    
Accumulated time: pickout 0.0044    decision 0.5171    set_bounds 0.0452    solve 2.0220    add 0.0161    
Current (lb-rhs): -12.15176773071289
960 domains visited
Cumulative time: 2.637187957763672

BaB round 5
batch: 512
splitting decisions: 
split level 0: [/input.15, 36] [/input.15, 43] [/input.15, 13] [/input.15, 43] [/input.15, 36] [/input.15, 43] [/input.15, 36] [/input.15, 43] [/input.15, 43] [/input.11, 76] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 8.726119995117188e-05
Time: prepare 1.4306    bound 0.2534    transfer 0.0006    finalize 0.1131    func 1.7978    
Accumulated time: func 3.8196    prepare 2.0438    bound 1.5566    transfer 0.0023    finalize 0.2181    
Current worst splitting domains lb-rhs (depth):
-11.72964 (10), -11.70641 (10), -11.67900 (10), -11.67487 (10), -11.48620 (10), -11.35515 (10), -11.34004 (10), -11.33928 (10), -11.33754 (10), -11.31770 (10), -11.30854 (10), -11.29239 (10), -11.28533 (10), -11.26613 (10), -11.26593 (10), -11.24480 (10), -11.23878 (10), -11.23115 (10), -11.21007 (10), -11.20879 (10), 
Length of domains: 1024
Time: pickout 0.0017    decision 0.0790    set_bounds 0.0408    solve 1.7981    add 0.0049    
Accumulated time: pickout 0.0061    decision 0.5961    set_bounds 0.0859    solve 3.8201    add 0.0211    
Current (lb-rhs): -11.72964096069336
1984 domains visited
Cumulative time: 4.563442707061768

BaB round 6
batch: 1024
splitting decisions: 
split level 0: [/input.15, 69] [/input.15, 69] [/input.15, 3] [/input.15, 69] [/input.15, 3] [/input.15, 69] [/input.15, 69] [/input.11, 12] [/input.15, 69] [/input.15, 43] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00017642974853515625
Time: prepare 3.7555    bound 0.3112    transfer 0.0024    finalize 0.2275    func 4.2968    
Accumulated time: func 8.1164    prepare 5.7996    bound 1.8678    transfer 0.0047    finalize 0.4456    
Current worst splitting domains lb-rhs (depth):
-11.32468 (11), -11.31650 (11), -11.25362 (11), -11.25287 (11), -11.19529 (11), -11.06148 (11), -11.04854 (11), -11.03147 (11), -11.01623 (11), -11.00137 (11), -10.99121 (11), -10.98759 (11), -10.98455 (11), -10.97009 (11), -10.96191 (11), -10.94184 (11), -10.93296 (11), -10.92827 (11), -10.91707 (11), -10.88507 (11), 
Length of domains: 2048
Time: pickout 0.0011    decision 0.1307    set_bounds 0.2242    solve 4.2973    add 0.0339    
Accumulated time: pickout 0.0072    decision 0.7267    set_bounds 0.3101    solve 8.1174    add 0.0550    
Current (lb-rhs): -11.324678421020508
4032 domains visited
Cumulative time: 9.254255056381226

BaB round 7
batch: 1024
splitting decisions: 
split level 0: [/input.15, 57] [/input.15, 57] [/input.15, 57] [/input.11, 12] [/input.15, 57] [/input.11, 76] [/input.15, 57] [/input.11, 76] [/input.15, 57] [/input.11, 12] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 8.797645568847656e-05
Time: prepare 1.3968    bound 0.2781    transfer 0.0009    finalize 0.2239    func 1.9003    
Accumulated time: func 10.0167    prepare 7.1966    bound 2.1459    transfer 0.0056    finalize 0.6695    
Current worst splitting domains lb-rhs (depth):
-11.32468 (11), -11.31650 (11), -11.25362 (11), -11.25287 (11), -11.19529 (11), -11.06148 (11), -11.04854 (11), -11.03147 (11), -11.00137 (11), -10.98455 (11), -10.96191 (11), -10.94184 (11), -10.93296 (11), -10.92827 (11), -10.91707 (11), -10.88507 (11), -10.86445 (11), -10.85510 (11), -10.85195 (11), -10.84574 (11), 
Length of domains: 3072
Time: pickout 0.0026    decision 0.6795    set_bounds 0.0858    solve 1.9008    add 0.0875    
Accumulated time: pickout 0.0098    decision 1.4062    set_bounds 0.3959    solve 10.0181    add 0.1425    
Current (lb-rhs): -11.324678421020508
6080 domains visited
Cumulative time: 12.014058351516724

BaB round 8
batch: 1024
splitting decisions: 
split level 0: [/input.15, 3] [/input.15, 3] [/input.15, 69] [/input.15, 57] [/input.15, 69] [/input.15, 57] [/input.15, 3] [/input.15, 69] [/input.15, 3] [/input.15, 69] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 9.131431579589844e-05
Time: prepare 0.7140    bound 0.2738    transfer 0.0011    finalize 0.2226    func 1.2120    
Accumulated time: func 11.2287    prepare 7.9109    bound 2.4197    transfer 0.0067    finalize 0.8920    
Current worst splitting domains lb-rhs (depth):
-11.32468 (11), -11.31650 (11), -11.25362 (11), -11.25287 (11), -11.19529 (11), -11.06148 (11), -11.04854 (11), -11.03147 (11), -11.00137 (11), -10.98455 (11), -10.96191 (11), -10.94184 (11), -10.93296 (11), -10.92827 (11), -10.91707 (11), -10.88507 (11), -10.86445 (11), -10.85510 (11), -10.85195 (11), -10.84574 (11), 
Length of domains: 4096
Time: pickout 0.0025    decision 0.1468    set_bounds 0.2783    solve 1.2124    add 0.0077    
Accumulated time: pickout 0.0123    decision 1.5530    set_bounds 0.6742    solve 11.2306    add 0.1502    
Current (lb-rhs): -11.324678421020508
8128 domains visited
Cumulative time: 13.666090250015259

BaB round 9
batch: 1024
splitting decisions: 
split level 0: [/input.15, 81] [/input.15, 51] [/input.15, 81] [/input.15, 3] [/input.15, 81] [/input.15, 3] [/input.15, 51] [/input.15, 3] [/input.15, 81] [/input.15, 57] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00034618377685546875
Time: prepare 0.9522    bound 0.2702    transfer 0.0009    finalize 0.2241    func 1.4476    
Accumulated time: func 12.6763    prepare 8.8633    bound 2.6900    transfer 0.0076    finalize 1.1161    
Current worst splitting domains lb-rhs (depth):
-11.32468 (11), -11.31650 (11), -11.25362 (11), -11.25287 (11), -11.19529 (11), -11.06148 (11), -11.04854 (11), -11.03147 (11), -11.00137 (11), -10.98455 (11), -10.96191 (11), -10.94184 (11), -10.93296 (11), -10.92827 (11), -10.91707 (11), -10.88507 (11), -10.86445 (11), -10.85510 (11), -10.85195 (11), -10.84574 (11), 
Length of domains: 5120
Time: pickout 0.0024    decision 0.1566    set_bounds 0.0860    solve 1.4483    add 0.1000    
Accumulated time: pickout 0.0147    decision 1.7096    set_bounds 0.7602    solve 12.6789    add 0.2502    
Current (lb-rhs): -11.324678421020508
10176 domains visited
Cumulative time: 15.462955951690674

BaB round 10
batch: 1024
splitting decisions: 
split level 0: [/input.15, 99] [/input.15, 81] [/input.15, 51] [/input.15, 51] [/input.15, 51] [/input.15, 81] [/input.15, 81] [/input.15, 57] [/input.15, 99] [/input.15, 3] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 8.654594421386719e-05
Time: prepare 1.4518    bound 0.2944    transfer 0.0009    finalize 0.2233    func 1.9705    
Accumulated time: func 14.6468    prepare 10.3154    bound 2.9843    transfer 0.0084    finalize 1.3394    
Current worst splitting domains lb-rhs (depth):
-11.32468 (11), -11.31650 (11), -11.25362 (11), -11.25287 (11), -11.19529 (11), -11.06148 (11), -11.04854 (11), -11.03147 (11), -11.00137 (11), -10.98455 (11), -10.96191 (11), -10.94184 (11), -10.93296 (11), -10.92827 (11), -10.91707 (11), -10.88507 (11), -10.86445 (11), -10.85510 (11), -10.85195 (11), -10.84574 (11), 
Length of domains: 6144
Time: pickout 0.0030    decision 0.1763    set_bounds 0.2385    solve 1.9709    add 0.0082    
Accumulated time: pickout 0.0177    decision 1.8858    set_bounds 0.9987    solve 14.6498    add 0.2584    
Current (lb-rhs): -11.324678421020508
12224 domains visited
Cumulative time: 17.86359143257141

BaB round 11
batch: 1024
splitting decisions: 
split level 0: [/input.15, 27] [/input.15, 27] [/input.15, 27] [/input.15, 81] [/input.15, 99] [/input.15, 51] [/input.15, 27] [/input.15, 81] [/input.15, 27] [/input.15, 51] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 8.678436279296875e-05
Time: prepare 1.4554    bound 0.2842    transfer 0.0009    finalize 0.2244    func 1.9650    
Accumulated time: func 16.6118    prepare 11.7711    bound 3.2685    transfer 0.0093    finalize 1.5637    
Current worst splitting domains lb-rhs (depth):
-11.32468 (11), -11.31650 (11), -11.25362 (11), -11.25287 (11), -11.19529 (11), -11.06148 (11), -11.04854 (11), -11.03147 (11), -11.00137 (11), -10.98455 (11), -10.96191 (11), -10.94184 (11), -10.93296 (11), -10.92827 (11), -10.91707 (11), -10.88507 (11), -10.86445 (11), -10.85510 (11), -10.85195 (11), -10.84574 (11), 
Length of domains: 7168
Time: pickout 0.0026    decision 0.2216    set_bounds 0.0842    solve 1.9654    add 0.0086    
Accumulated time: pickout 0.0203    decision 2.1074    set_bounds 1.0829    solve 16.6152    add 0.2670    
Current (lb-rhs): -11.324678421020508
14272 domains visited
Time out!!!!!!!!
Result: unknown in 302.5103 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True)
  (/21): BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
  (/input.15): BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True)
  (/23): BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
  (/24): BoundLinear(name=/24, inputs=[/23, /11, /12], perturbed=True)
)
Original output: tensor([[ 8.88894367, -5.73989105,  1.69153154, -2.75718284, -0.80734628,
          1.47506475, -0.14794892, -2.69776011, -1.23268425,  0.21537560]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True): [(BoundRelu(name=/21, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True): [(BoundRelu(name=/23, inputs=[/input.15], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /input.3 using sparse-spec alpha [2, 37, 1, 25] with unstable size 36 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.7 using sparse-spec alpha [2, 34, 1, 25] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.11 using sparse-spec alpha [2, 43, 1, 25] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.15 using sparse-spec alpha [2, 51, 1, 25] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /15 start_node /24 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [36]; unstable size 36; total size 100 ([1, 100])
layer /17 start_node /input.7 using sparse-spec alpha [2, 34, 1, 36] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.11 using sparse-spec alpha [2, 43, 1, 36] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.15 using sparse-spec alpha [2, 51, 1, 36] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /17 start_node /24 using full alpha [2, 9, 1, 36] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [33]; unstable size 33; total size 100 ([1, 100])
layer /19 start_node /input.11 using sparse-spec alpha [2, 43, 1, 33] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /19 start_node /input.15 using sparse-spec alpha [2, 51, 1, 33] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /19 start_node /24 using full alpha [2, 9, 1, 33] with unstable size None total_size 9 output_shape 9
layer /21 using sparse-features alpha with shape [42]; unstable size 42; total size 100 ([1, 100])
layer /21 start_node /input.15 using sparse-spec alpha [2, 51, 1, 42] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /21 start_node /24 using full alpha [2, 9, 1, 42] with unstable size None total_size 9 output_shape 9
layer /23 using sparse-features alpha with shape [50]; unstable size 50; total size 100 ([1, 100])
layer /23 start_node /24 using full alpha [2, 9, 1, 50] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.06111479, 0.50684547, 3.75415373, 2.68184853, 2.55889487, 3.37677455,
         4.42647457, 3.59847403, 2.54529238]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0574 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundFlatten(name=/13, inputs=[/0], perturbed=True)
  (/input): BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True)
  (/17): BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True)
  (/19): BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
  (/input.11): BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True)
  (/21): BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
  (/input.15): BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True)
  (/23): BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
  (/24): BoundLinear(name=/24, inputs=[/23, /11, /12], perturbed=True)
)
Original output: tensor([[-1.33794570, -1.49482858, -0.54522443, -2.72489309,  6.67754793,
          0.05568242, -2.42807078,  0.42011368, -0.43017653,  3.95283270]],
       device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/13, /1, /2], perturbed=True): [(BoundRelu(name=/15, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/15, /3, /4], perturbed=True): [(BoundRelu(name=/17, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/17, /5, /6], perturbed=True): [(BoundRelu(name=/19, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/19, /7, /8], perturbed=True): [(BoundRelu(name=/21, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/21, /9, /10], perturbed=True): [(BoundRelu(name=/23, inputs=[/input.15], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/15, inputs=[/input], perturbed=True)
   BoundRelu(name=/17, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/19, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/21, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/23, inputs=[/input.15], perturbed=True)
layer /15 using sparse-features alpha with shape [36]; unstable size 36; total size 100 ([1, 100])
layer /15 start_node /input.3 using sparse-spec alpha [2, 57, 1, 36] with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.7 using sparse-spec alpha [2, 82, 1, 36] with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.11 using full alpha [2, 100, 1, 36] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.15 using full alpha [2, 100, 1, 36] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /24 using full alpha [2, 9, 1, 36] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [56]; unstable size 56; total size 100 ([1, 100])
layer /17 start_node /input.7 using sparse-spec alpha [2, 82, 1, 56] with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.11 using full alpha [2, 100, 1, 56] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.15 using full alpha [2, 100, 1, 56] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /24 using full alpha [2, 9, 1, 56] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [81]; unstable size 81; total size 100 ([1, 100])
layer /19 start_node /input.11 using full alpha [2, 100, 1, 81] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /19 start_node /input.15 using full alpha [2, 100, 1, 81] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /19 start_node /24 using full alpha [2, 9, 1, 81] with unstable size None total_size 9 output_shape 9
layer /21 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /21 start_node /input.15 using full alpha [2, 100, 1, 100] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /21 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
layer /23 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /23 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-18.15695190, -19.67529106, -17.41659927, -20.64156342, -20.80030251,
         -15.61868095, -17.59780121, -21.88948059, -18.15885544]],
       device='cuda:0') None
best_l after optimization: -120.3211441040039
alpha/beta optimization time: 5.805004358291626
initial alpha-crown bounds: tensor([[-13.05822945, -13.10799313, -12.52546310, -14.87455177, -14.89960861,
         -10.13887024, -12.60935783, -15.56227493, -13.54479408]],
       device='cuda:0')
Worst class: (+ rhs) -15.562274932861328
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.33794570, -1.49482858, -0.54522443, -2.72489333,  6.67754793,
          0.05568254, -2.42807055,  0.42011374, -0.43017635,  3.95283270]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.36642301, -1.23839831, -0.85797799, -2.05224252,  5.37845612,
           0.14592844, -2.38998961,  0.33958891, -0.15600213,  3.94958758],
         [-1.36642301, -1.23839831, -0.85797799, -2.05224252,  5.37845612,
           0.14592844, -2.38998961,  0.33958891, -0.15600213,  3.94958758]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.74487925, 6.61685467, 6.23643398, 7.43069839, 5.23252773,
          7.76844597, 5.03886700, 5.53445816, 1.42886853]]], device='cuda:0')
number of violation:  0
Attack finished in 0.2715 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /15 using sparse-features alpha with shape [36]; unstable size 36; total size 100 ([1, 100])
layer /15 start_node /input.3 using sparse-spec alpha [2, 57, 1, 36] with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.7 using sparse-spec alpha [2, 82, 1, 36] with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.11 using full alpha [2, 100, 1, 36] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /input.15 using full alpha [2, 100, 1, 36] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /15 start_node /24 using full alpha [2, 9, 1, 36] with unstable size None total_size 9 output_shape 9
layer /17 using sparse-features alpha with shape [56]; unstable size 56; total size 100 ([1, 100])
layer /17 start_node /input.7 using sparse-spec alpha [2, 82, 1, 56] with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.11 using full alpha [2, 100, 1, 56] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /input.15 using full alpha [2, 100, 1, 56] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /17 start_node /24 using full alpha [2, 9, 1, 56] with unstable size None total_size 9 output_shape 9
layer /19 using sparse-features alpha with shape [81]; unstable size 81; total size 100 ([1, 100])
layer /19 start_node /input.11 using full alpha [2, 100, 1, 81] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /19 start_node /input.15 using full alpha [2, 100, 1, 81] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /19 start_node /24 using full alpha [2, 9, 1, 81] with unstable size None total_size 9 output_shape 9
layer /21 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /21 start_node /input.15 using full alpha [2, 100, 1, 100] with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /21 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
layer /23 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 ([1, 100])
layer /23 start_node /24 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

refine the bounds for layer  /15
maximum relu layer improved by MIP so far 0
refine the bounds for layer  /17
sorted candidates [('lay/input.3_0', None, tensor(-0.87160569), tensor(0.48296872)), ('lay/input.3_6', None, tensor(-0.35955319), tensor(0.92349279)), ('lay/input.3_8', None, tensor(-0.28764439), tensor(1.53484321)), ('lay/input.3_10', None, tensor(-1.40683055), tensor(0.59537339)), ('lay/input.3_12', None, tensor(-1.04896164), tensor(0.54282260)), ('lay/input.3_13', None, tensor(-1.57090080), tensor(0.40012312)), ('lay/input.3_16', None, tensor(-0.18724430), tensor(1.64565563)), ('lay/input.3_18', None, tensor(-0.28234655), tensor(1.08873034)), ('lay/input.3_20', None, tensor(-0.90177518), tensor(0.59191126)), ('lay/input.3_21', None, tensor(-1.08566773), tensor(0.55945086)), ('lay/input.3_22', None, tensor(-1.13767469), tensor(0.62476134)), ('lay/input.3_23', None, tensor(-0.94167739), tensor(0.64826101)), ('lay/input.3_24', None, tensor(-1.22366238), tensor(0.41573903)), ('lay/input.3_25', None, tensor(-1.13943624), tensor(0.72405022)), ('lay/input.3_26', None, tensor(-1.31130457), tensor(0.57308710)), ('lay/input.3_27', None, tensor(-1.29056823), tensor(0.23579127)), ('lay/input.3_31', None, tensor(-1.87977183), tensor(0.40648913)), ('lay/input.3_32', None, tensor(-1.29499245), tensor(0.22009829)), ('lay/input.3_33', None, tensor(-1.14079070), tensor(0.32431823)), ('lay/input.3_34', None, tensor(-0.55162072), tensor(1.22714162)), ('lay/input.3_37', None, tensor(-0.96332693), tensor(0.19336957)), ('lay/input.3_38', None, tensor(-0.94873643), tensor(0.54683238)), ('lay/input.3_40', None, tensor(-0.79334038), tensor(0.71037698)), ('lay/input.3_41', None, tensor(-0.14279777), tensor(1.56511283)), ('lay/input.3_42', None, tensor(-1.03481781), tensor(0.85547447)), ('lay/input.3_43', None, tensor(-0.28566965), tensor(1.88474345)), ('lay/input.3_45', None, tensor(-0.11513519), tensor(1.22771144)), ('lay/input.3_46', None, tensor(-1.36382604), tensor(0.15748811)), ('lay/input.3_48', None, tensor(-1.70544291), tensor(0.05505478)), ('lay/input.3_49', None, tensor(-0.92793673), tensor(0.75580376)), ('lay/input.3_51', None, tensor(-1.12460077), tensor(0.32765910)), ('lay/input.3_52', None, tensor(-0.57546890), tensor(1.11071682)), ('lay/input.3_54', None, tensor(-1.31685984), tensor(0.09777740)), ('lay/input.3_55', None, tensor(-1.47193575), tensor(0.28674358)), ('lay/input.3_60', None, tensor(-1.41121221), tensor(0.21579295)), ('lay/input.3_62', None, tensor(-1.11029541), tensor(0.52070093)), ('lay/input.3_64', None, tensor(-0.34155846), tensor(1.11435115)), ('lay/input.3_66', None, tensor(-1.45854354), tensor(0.13196254)), ('lay/input.3_67', None, tensor(-1.22599983), tensor(0.26445934)), ('lay/input.3_68', None, tensor(-2.07895875), tensor(0.00168729)), ('lay/input.3_69', None, tensor(-1.02898049), tensor(0.55362034)), ('lay/input.3_71', None, tensor(-0.93373823), tensor(0.81925386)), ('lay/input.3_74', None, tensor(-1.74725187), tensor(0.45875424)), ('lay/input.3_76', None, tensor(-0.88663030), tensor(0.48373687)), ('lay/input.3_78', None, tensor(-2.43586206), tensor(0.29218256)), ('lay/input.3_79', None, tensor(-1.43002582), tensor(0.71017069)), ('lay/input.3_80', None, tensor(-1.31398737), tensor(0.36571622)), ('lay/input.3_81', None, tensor(-2.94895768), tensor(0.14965624)), ('lay/input.3_83', None, tensor(-0.76767218), tensor(0.81820691)), ('lay/input.3_84', None, tensor(-1.51919079), tensor(0.14605552)), ('lay/input.3_86', None, tensor(-1.31605291), tensor(0.12743595)), ('lay/input.3_93', None, tensor(-1.39980841), tensor(0.32711971)), ('lay/input.3_94', None, tensor(-1.06938648), tensor(0.42425641)), ('lay/input.3_96', None, tensor(-1.07492256), tensor(0.56916201)), ('lay/input.3_99', None, tensor(-1.46607661), tensor(0.29617533))] filter: 1.0
PGD done for relu layer 1
Solving MIP for lay/input.3_27,[-1.290568232536316,0.23579126596450806]=>[-1.290568232536316,-1e-05] (-1,-1; 15,-1), time: 0.2329s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_16,[-0.18724429607391357,1.645655632019043]=>[1e-05,1.645655632019043] (15,-1; -1,-1), time: 0.2655s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_13,[-1.570900797843933,0.40012311935424805]=>[-1.354462335433885,0.05032820219244033] (2,-1; 2,-1), time: 0.5068s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_10,[-1.4068305492401123,0.5953733921051025]=>[-1.0675446759517841,0.36725061265794356] (2,-1; 2,-1), time: 0.6275s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_18,[-0.28234654664993286,1.0887303352355957]=>[-0.03538461096554121,0.9095882383420761] (2,-1; 2,-1), time: 0.6611s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_8,[-0.2876443862915039,1.5348432064056396]=>[1e-05,1.5348432064056396] (15,-1; -1,-1), time: 0.7011s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_26,[-1.3113045692443848,0.5730870962142944]=>[-0.9084444967335941,0.3638206548962548] (2,-1; 2,-1), time: 0.7604s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_25,[-1.1394362449645996,0.7240502238273621]=>[-0.8682903087412855,0.49478238335252595] (2,-1; 2,-1), time: 0.7759s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_41,[-0.14279776811599731,1.565112829208374]=>[1e-05,1.565112829208374] (15,-1; -1,-1), time: 0.1428s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_20,[-0.9017751812934875,0.591911256313324]=>[-0.5589320076906812,0.47493763749301066] (2,-1; 2,-1), time: 1.0137s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_22,[-1.1376746892929077,0.6247613430023193]=>[-0.6356015486748844,0.505653603978684] (2,-1; 2,-1), time: 1.1699s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_43,[-0.2856696546077728,1.8847434520721436]=>[-0.06699268402231508,1.5539064484139506] (2,-1; 2,-1), time: 0.3124s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_45,[-0.11513519287109375,1.2277114391326904]=>[1e-05,1.2277114391326904] (15,-1; -1,-1), time: 0.1518s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_40,[-0.7933403849601746,0.7103769779205322]=>[-0.5387841582635167,0.4766668096729956] (2,-1; 2,-1), time: 0.6185s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_31,[-1.8797718286514282,0.40648913383483887]=>[-1.411400901875671,0.09302784209781303] (2,-1; 2,-1), time: 1.1540s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_48,[-1.7054429054260254,0.05505478382110596]=>[-1.7054429054260254,-1e-05] (-1,-1; 15,-1), time: 0.1375s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_46,[-1.363826036453247,0.15748810768127441]=>[-1.363826036453247,-1e-05] (-1,-1; 15,-1), time: 0.1478s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_12,[-1.0489616394042969,0.5428225994110107]=>[-0.6688564612227331,0.3816567846427964] (2,-1; 2,-1), time: 1.5032s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_23,[-0.9416773915290833,0.6482610106468201]=>[-0.5935288238186324,0.45873113075318933] (2,-1; 2,-1), time: 1.5105s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_38,[-0.9487364292144775,0.5468323826789856]=>[-0.6453978828515935,0.3748994610511331] (2,-1; 2,-1), time: 0.8441s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_42,[-1.0348178148269653,0.8554744720458984]=>[-0.7542032277291867,0.47487831137650516] (2,-1; 2,-1), time: 0.6124s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_32,[-1.294992446899414,0.22009828686714172]=>[-1.0377404344290257,0.018199699753273242] (2,-1; 2,-1), time: 1.3393s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_54,[-1.3168598413467407,0.09777739644050598]=>[-1.3168598413467407,-1e-05] (-1,-1; 15,-1), time: 0.1440s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_66,[-1.4585435390472412,0.13196253776550293]=>[-1.4585435390472412,-1e-05] (-1,-1; 15,-1), time: 0.1308s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_21,[-1.0856677293777466,0.5594508647918701]=>[-0.7801292314141122,0.2672970353241603] (2,-1; 2,-1), time: 1.8005s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_24,[-1.2236623764038086,0.4157390296459198]=>[-0.8581291109641472,0.18586460081315068] (2,-1; 2,-1), time: 1.8053s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_0,[-0.8716056942939758,0.4829687178134918]=>[-0.5984110896386032,0.2400300562992379] (2,-1; 2,-1), time: 1.8345s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_60,[-1.4112122058868408,0.2157929539680481]=>[-1.4112122058868408,-1e-05] (-1,-1; 15,-1), time: 0.3406s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_68,[-2.078958749771118,0.0016872882843017578]=>[-2.078958749771118,-1e-05] (-1,-1; 15,-1), time: 0.1775s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_33,[-1.1407907009124756,0.3243182301521301]=>[-0.8592624718517137,0.0458642193587264] (2,-1; 2,-1), time: 1.5253s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_64,[-0.34155845642089844,1.1143511533737183]=>[1e-05,1.1143511533737183] (15,-1; -1,-1), time: 0.5054s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_78,[-2.4358620643615723,0.2921825647354126]=>[-2.4358620643615723,-1e-05] (-1,-1; 15,-1), time: 0.1228s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_49,[-0.9279367327690125,0.7558037638664246]=>[-0.5942190249959952,0.5352217006748267] (2,-1; 2,-1), time: 0.6867s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_55,[-1.471935749053955,0.2867435812950134]=>[-1.2082230075031717,0.035139627177290494] (2,-1; 2,-1), time: 0.6926s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_81,[-2.948957681655884,0.1496562361717224]=>[-2.948957681655884,-1e-05] (-1,-1; 15,-1), time: 0.1351s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_37,[-0.9633269309997559,0.1933695673942566]=>[-0.7285194496507358,0.017718654744612997] (2,-1; 2,-1), time: 1.5610s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_62,[-1.1102954149246216,0.5207009315490723]=>[-0.846849518284963,0.2268112920376844] (2,-1; 2,-1), time: 0.7230s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_67,[-1.2259998321533203,0.2644593417644501]=>[-1.0566351988970595,0.006805600944864591] (2,-1; 2,-1), time: 0.6670s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_86,[-1.3160529136657715,0.12743595242500305]=>[-1.3160529136657715,-1e-05] (-1,-1; 15,-1), time: 0.1250s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_84,[-1.519190788269043,0.14605551958084106]=>[-1.519190788269043,-1e-05] (-1,-1; 15,-1), time: 0.1316s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_6,[-0.35955318808555603,0.9234927892684937]=>[-0.06979750102131563,0.6794999526284835] (2,-1; 2,-1), time: 2.3848s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_34,[-0.5516207218170166,1.2271416187286377]=>[-0.10948651919586093,1.0176287612463857] (2,-1; 2,-1), time: 1.8029s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_51,[-1.1246007680892944,0.32765910029411316]=>[-0.8284578065646391,0.13614772244051251] (2,-1; 2,-1), time: 1.1460s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_74,[-1.7472518682479858,0.4587542414665222]=>[-1.5073657919192187,0.018841875761703555] (2,-1; 2,-1), time: 0.8348s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_52,[-0.575468897819519,1.1107168197631836]=>[-0.30613375013626165,0.7927490205966096] (2,-1; 2,-1), time: 1.2359s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_80,[-1.313987374305725,0.36571621894836426]=>[-1.123910578934066,0.06314545701904041] (2,-1; 2,-1), time: 0.7996s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_96,[-1.0749225616455078,0.5691620111465454]=>[-0.7657464252427559,0.3151062898513955] (2,-1; 2,-1), time: 0.6700s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_71,[-0.9337382316589355,0.8192538619041443]=>[-0.4987219400870722,0.6267774820380118] (2,-1; 2,-1), time: 1.1875s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_76,[-0.8866302967071533,0.48373687267303467]=>[-0.7034114186611826,0.17692925706582865] (2,-1; 2,-1), time: 1.1587s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_99,[-1.4660766124725342,0.2961753308773041]=>[-1.4660766124725342,-1e-05] (-1,-1; 15,-1), time: 0.7958s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_94,[-1.0693864822387695,0.42425641417503357]=>[-0.8186874777776623,0.1862493000137462] (2,-1; 2,-1), time: 0.9783s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_69,[-1.0289804935455322,0.5536203384399414]=>[-0.5785690052868767,0.4154200214719709] (2,-1; 2,-1), time: 1.4841s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_79,[-1.4300258159637451,0.7101706862449646]=>[-1.0143016219583945,0.3694750185411886] (2,-1; 2,-1), time: 1.4078s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_83,[-0.7676721811294556,0.8182069063186646]=>[-0.4689594261082623,0.5565762253922636] (2,-1; 2,-1), time: 1.4898s, #vars: 1059, #constrs: 308, improved: True
Solving MIP for lay/input.3_93,[-1.399808406829834,0.32711970806121826]=>[-1.01405495195968,0.12014642947450083] (2,-1; 2,-1), time: 1.3479s, #vars: 1059, #constrs: 308, improved: True
PGD done for relu layer 2
MIP improved 55 nodes out of 55 unstable nodes for layer /17, time 5.2434
MIP got 0 timeout nodes out of 55 nodes for layer /17
maximum relu layer improved by MIP so far 1
refine the bounds for layer  /19
sorted candidates [('lay/input.7_0', None, tensor(-0.50923073), tensor(1.25991857)), ('lay/input.7_1', None, tensor(-1.34935093), tensor(0.60313416)), ('lay/input.7_2', None, tensor(-1.38249874), tensor(0.29068428)), ('lay/input.7_3', None, tensor(-0.62797207), tensor(1.65397859)), ('lay/input.7_4', None, tensor(-1.35316849), tensor(0.52518606)), ('lay/input.7_5', None, tensor(-0.16325170), tensor(1.29398394)), ('lay/input.7_6', None, tensor(-1.32211637), tensor(0.26212132)), ('lay/input.7_8', None, tensor(-1.85926652), tensor(0.18528450)), ('lay/input.7_9', None, tensor(-0.78008914), tensor(0.69011247)), ('lay/input.7_10', None, tensor(-1.09692872), tensor(0.57209927)), ('lay/input.7_11', None, tensor(-1.05806530), tensor(0.79385537)), ('lay/input.7_12', None, tensor(-0.66600847), tensor(1.92273796)), ('lay/input.7_14', None, tensor(-2.34560442), tensor(0.21761298)), ('lay/input.7_15', None, tensor(-0.95581585), tensor(0.34769168)), ('lay/input.7_16', None, tensor(-1.28150034), tensor(0.49069494)), ('lay/input.7_17', None, tensor(-1.20247102), tensor(0.36205548)), ('lay/input.7_19', None, tensor(-1.31511235), tensor(0.11515462)), ('lay/input.7_20', None, tensor(-0.29308996), tensor(1.34334600)), ('lay/input.7_21', None, tensor(-0.70662463), tensor(0.55521297)), ('lay/input.7_24', None, tensor(-1.03540218), tensor(0.42309844)), ('lay/input.7_25', None, tensor(-1.22999060), tensor(0.89551491)), ('lay/input.7_26', None, tensor(-1.05074835), tensor(0.59663808)), ('lay/input.7_27', None, tensor(-1.90295053), tensor(0.09142023)), ('lay/input.7_28', None, tensor(-1.09930813), tensor(0.78225565)), ('lay/input.7_29', None, tensor(-0.18464249), tensor(1.20650458)), ('lay/input.7_30', None, tensor(-1.00573170), tensor(1.19089103)), ('lay/input.7_32', None, tensor(-0.70038939), tensor(1.39269257)), ('lay/input.7_33', None, tensor(-0.26152146), tensor(1.55541706)), ('lay/input.7_35', None, tensor(-1.63948810), tensor(0.34370649)), ('lay/input.7_36', None, tensor(-0.88139409), tensor(0.65019238)), ('lay/input.7_37', None, tensor(-0.23578325), tensor(1.51227546)), ('lay/input.7_38', None, tensor(-1.76563239), tensor(0.03240657)), ('lay/input.7_40', None, tensor(-0.94385695), tensor(0.60575938)), ('lay/input.7_41', None, tensor(-0.45563823), tensor(1.01480854)), ('lay/input.7_42', None, tensor(-0.44510913), tensor(1.48667490)), ('lay/input.7_43', None, tensor(-0.16573995), tensor(1.63570595)), ('lay/input.7_44', None, tensor(-1.70325494), tensor(0.31381077)), ('lay/input.7_45', None, tensor(-0.01102209), tensor(2.15768933)), ('lay/input.7_46', None, tensor(-1.04406404), tensor(1.25995135)), ('lay/input.7_47', None, tensor(-1.96368146), tensor(0.01891911)), ('lay/input.7_49', None, tensor(-1.04053509), tensor(0.75238085)), ('lay/input.7_50', None, tensor(-0.42189926), tensor(2.24756050)), ('lay/input.7_52', None, tensor(-0.95563298), tensor(0.43150541)), ('lay/input.7_54', None, tensor(-0.44007564), tensor(1.84005654)), ('lay/input.7_55', None, tensor(-1.42621171), tensor(0.35994667)), ('lay/input.7_60', None, tensor(-0.74947584), tensor(0.84419429)), ('lay/input.7_61', None, tensor(-1.37631190), tensor(0.29736960)), ('lay/input.7_62', None, tensor(-0.20417559), tensor(1.12649751)), ('lay/input.7_64', None, tensor(-0.54127395), tensor(1.10299182)), ('lay/input.7_65', None, tensor(-1.64786303), tensor(0.48242623)), ('lay/input.7_66', None, tensor(-1.19259262), tensor(0.27213857)), ('lay/input.7_67', None, tensor(-0.54460263), tensor(1.25263202)), ('lay/input.7_68', None, tensor(-0.89103025), tensor(0.87097347)), ('lay/input.7_70', None, tensor(-0.37540621), tensor(1.79292250)), ('lay/input.7_72', None, tensor(-1.29241776), tensor(0.26375040)), ('lay/input.7_74', None, tensor(-1.12564433), tensor(0.49182519)), ('lay/input.7_75', None, tensor(-0.80721396), tensor(0.77662623)), ('lay/input.7_76', None, tensor(-1.67587233), tensor(0.44850111)), ('lay/input.7_77', None, tensor(-1.73559308), tensor(0.04374632)), ('lay/input.7_78', None, tensor(-0.50610375), tensor(0.88086629)), ('lay/input.7_79', None, tensor(-0.01115382), tensor(3.00213313)), ('lay/input.7_80', None, tensor(-0.85649920), tensor(1.11133504)), ('lay/input.7_81', None, tensor(-1.14117861), tensor(0.73881221)), ('lay/input.7_82', None, tensor(-1.31178761), tensor(0.47564426)), ('lay/input.7_83', None, tensor(-0.70920736), tensor(0.73193908)), ('lay/input.7_84', None, tensor(-1.66564202), tensor(0.11510736)), ('lay/input.7_86', None, tensor(-1.26288402), tensor(0.16850734)), ('lay/input.7_87', None, tensor(-0.99308324), tensor(0.92055488)), ('lay/input.7_88', None, tensor(-0.08251750), tensor(1.53990519)), ('lay/input.7_89', None, tensor(-0.68935782), tensor(0.93180597)), ('lay/input.7_90', None, tensor(-1.79775572), tensor(0.15746564)), ('lay/input.7_91', None, tensor(-0.99921435), tensor(0.86243367)), ('lay/input.7_93', None, tensor(-0.30249441), tensor(1.66438651)), ('lay/input.7_94', None, tensor(-1.59460354), tensor(0.53516662)), ('lay/input.7_95', None, tensor(-1.34741116), tensor(0.16403365)), ('lay/input.7_96', None, tensor(-1.43514895), tensor(0.10812724)), ('lay/input.7_97', None, tensor(-1.62451720), tensor(0.29051697)), ('lay/input.7_98', None, tensor(-1.67871690), tensor(0.56553113))] filter: 1.0
Solving MIP for lay/input.7_8,[-1.8592665195465088,0.18528449535369873]=>[-1.8592665195465088,-1e-05] (-1,-1; 15,-1), time: 0.1283s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_6,[-1.3221163749694824,0.262121319770813]=>[-1.3221163749694824,-1e-05] (-1,-1; 15,-1), time: 0.1346s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_5,[-0.16325169801712036,1.2939839363098145]=>[1e-05,1.2939839363098145] (15,-1; -1,-1), time: 0.1370s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_14,[-2.345604419708252,0.21761298179626465]=>[-2.345604419708252,-1e-05] (-1,-1; 15,-1), time: 0.1324s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_19,[-1.3151123523712158,0.11515462398529053]=>[-1.3151123523712158,-1e-05] (-1,-1; 15,-1), time: 0.1031s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_20,[-0.29308995604515076,1.3433459997177124]=>[1e-05,1.3433459997177124] (15,-1; -1,-1), time: 0.1001s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_2,[-1.3824987411499023,0.2906842827796936]=>[-1.3824987411499023,-1e-05] (-1,-1; 15,-1), time: 0.4324s, #vars: 1235, #constrs: 522, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining relu idx 1
relu layer: 1 has unstable to stable neurons: [(8, 1), (16, 1), (27, -1), (41, 1), (45, 1), (46, -1), (48, -1), (54, -1), (60, -1), (64, 1), (66, -1), (68, -1), (78, -1), (81, -1), (84, -1), (86, -1), (99, -1)]
Solving MIP for lay/input.7_27,[-1.9029505252838135,0.0914202332496643]=>[-1.9029505252838135,-1e-05] (-1,-1; 15,-1), time: 0.0930s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_12,[-0.666008472442627,1.922737956047058]=>[1e-05,1.922737956047058] (15,-1; -1,-1), time: 1.9508s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_29,[-0.184642493724823,1.2065045833587646]=>[1e-05,1.2065045833587646] (15,-1; -1,-1), time: 0.0756s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_4,[-1.3531684875488281,0.5251860618591309]=>[-1.3531684875488281,-1e-05] (-1,-1; 15,-1), time: 2.0867s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_17,[-1.2024710178375244,0.3620554804801941]=>[-1.2024710178375244,-1e-05] (-1,-1; 15,-1), time: 2.0917s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_15,[-0.955815851688385,0.34769168496131897]=>[-0.955815851688385,-1e-05] (-1,-1; 15,-1), time: 2.0992s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_33,[-0.26152145862579346,1.5554170608520508]=>[1e-05,1.5554170608520508] (15,-1; -1,-1), time: 0.0813s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_35,[-1.6394881010055542,0.34370648860931396]=>[-1.6394881010055542,-1e-05] (-1,-1; 15,-1), time: 0.2799s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_37,[-0.23578324913978577,1.5122754573822021]=>[1e-05,1.5122754573822021] (15,-1; -1,-1), time: 0.0750s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_38,[-1.7656323909759521,0.03240656852722168]=>[-1.7656323909759521,-1e-05] (-1,-1; 15,-1), time: 0.0770s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_24,[-1.0354021787643433,0.42309844493865967]=>[-1.0354021787643433,-1e-05] (-1,-1; 15,-1), time: 2.8686s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_16,[-1.2815003395080566,0.49069494009017944]=>[-1.2815003395080566,-1e-05] (-1,-1; 15,-1), time: 3.1479s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_10,[-1.0969287157058716,0.5720992684364319]=>[-1.0969287157058716,-0.0007316553398422168] (-1,-1; 2,-1), time: 3.2526s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_43,[-0.16573995351791382,1.6357059478759766]=>[1e-05,1.6357059478759766] (15,-1; -1,-1), time: 0.0722s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_44,[-1.7032549381256104,0.3138107657432556]=>[-1.7032549381256104,-1e-05] (-1,-1; 15,-1), time: 0.2382s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_45,[-0.011022090911865234,2.157689332962036]=>[1e-05,2.157689332962036] (15,-1; -1,-1), time: 0.0729s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_42,[-0.44510912895202637,1.4866749048233032]=>[1e-05,1.4866749048233032] (15,-1; -1,-1), time: 0.5219s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_47,[-1.9636814594268799,0.01891911029815674]=>[-1.9636814594268799,-1e-05] (-1,-1; 15,-1), time: 0.0745s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_3,[-0.6279720664024353,1.6539785861968994]=>[1e-05,1.6539785861968994] (15,-1; -1,-1), time: 4.2465s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_50,[-0.4218992590904236,2.247560501098633]=>[1e-05,2.247560501098633] (15,-1; -1,-1), time: 0.2947s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_41,[-0.45563822984695435,1.0148085355758667]=>[1e-05,1.0148085355758667] (15,-1; -1,-1), time: 2.3271s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_0,[-0.5092307329177856,1.2599185705184937]=>[-0.0999152265335844,0.587631541706753] (2,-1; 2,-1), time: 5.4140s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_25,[-1.2299906015396118,0.8955149054527283]=>[-0.6100826667210518,0.23030022680201145] (2,-1; 2,-1), time: 5.3043s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_21,[-0.7066246271133423,0.5552129745483398]=>[-0.28247088621546923,0.1936719434508911] (2,-1; 2,-1), time: 5.4595s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_54,[-0.4400756359100342,1.8400565385818481]=>[1e-05,1.8400565385818481] (15,-1; -1,-1), time: 0.3289s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_55,[-1.4262117147445679,0.35994666814804077]=>[-1.4262117147445679,-1e-05] (-1,-1; 15,-1), time: 0.3234s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_61,[-1.3763118982315063,0.2973695993423462]=>[-1.3763118982315063,-1e-05] (-1,-1; 15,-1), time: 0.3366s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_62,[-0.20417559146881104,1.126497507095337]=>[1e-05,1.126497507095337] (15,-1; -1,-1), time: 0.3319s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_65,[-1.6478630304336548,0.4824262261390686]=>[-1.6478630304336548,-1e-05] (-1,-1; 15,-1), time: 0.2847s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_66,[-1.1925926208496094,0.2721385657787323]=>[-1.1925926208496094,-1e-05] (-1,-1; 15,-1), time: 0.3030s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_32,[-0.7003893852233887,1.3926925659179688]=>[-0.11144461128156011,0.8818588071689862] (2,-1; 2,-1), time: 4.7790s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_26,[-1.050748348236084,0.5966380834579468]=>[-1.050748348236084,0.042496474664701904] (11,-1; 2,-1), time: 6.6565s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_11,[-1.0580652952194214,0.7938553690910339]=>[-1.0580652952194214,0.31031343709730935] (11,-1; 2,-1), time: 6.9045s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_9,[-0.7800891399383545,0.6901124715805054]=>[-0.7800891399383545,0.33138348629503356] (11,-1; 2,-1), time: 6.9067s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_36,[-0.88139408826828,0.650192379951477]=>[-0.88139408826828,0.26746066705951094] (11,-1; 2,-1), time: 4.7160s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_30,[-1.0057317018508911,1.1908910274505615]=>[-0.21801943473284222,1.1908910274505615] (2,-1; 11,-1), time: 4.8662s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_40,[-0.943856954574585,0.6057593822479248]=>[-0.943856954574585,0.21901740681348697] (11,-1; 2,-1), time: 4.3542s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_1,[-1.349350929260254,0.6031341552734375]=>[-1.349350929260254,0.02106742634074804] (11,-1; 2,-1), time: 6.9162s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_28,[-1.0993081331253052,0.7822556495666504]=>[-1.0993081331253052,0.15132271195253302] (11,-1; 2,-1), time: 6.3788s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_46,[-1.0440640449523926,1.2599513530731201]=>[-0.43389091850559924,1.2599513530731201] (2,-1; 11,-1), time: 3.2831s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_77,[-1.7355930805206299,0.04374632239341736]=>[-1.7355930805206299,-1e-05] (-1,-1; 15,-1), time: 0.0739s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_79,[-0.011153817176818848,3.0021331310272217]=>[1e-05,3.0021331310272217] (15,-1; -1,-1), time: 0.0797s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_49,[-1.0405350923538208,0.7523808479309082]=>[-1.0405350923538208,0.7523808479309082] (11,-1; 11,-1), time: 3.4746s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_64,[-0.5412739515304565,1.1029918193817139]=>[-0.5412739515304565,1.1029918193817139] (11,-1; 11,-1), time: 1.5101s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_68,[-0.8910302519798279,0.8709734678268433]=>[-0.8910302519798279,0.8709734678268433] (11,-1; 11,-1), time: 0.9092s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_70,[-0.3754062056541443,1.7929224967956543]=>[-0.3754062056541443,1.7929224967956543] (11,-1; 11,-1), time: 0.3890s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_84,[-1.6656420230865479,0.11510735750198364]=>[-1.6656420230865479,-1e-05] (-1,-1; 15,-1), time: 0.0726s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_86,[-1.2628840208053589,0.16850733757019043]=>[-1.2628840208053589,-1e-05] (-1,-1; 15,-1), time: 0.0735s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_67,[-0.544602632522583,1.2526320219039917]=>[-0.544602632522583,1.2526320219039917] (11,-1; 11,-1), time: 1.0981s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_60,[-0.7494758367538452,0.8441942930221558]=>[-0.7494758367538452,0.8441942930221558] (11,-1; 11,-1), time: 1.7850s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_52,[-0.9556329846382141,0.431505411863327]=>[-0.9556329846382141,0.431505411863327] (11,-1; 11,-1), time: 2.7955s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_88,[-0.08251750469207764,1.5399051904678345]=>[1e-05,1.5399051904678345] (15,-1; -1,-1), time: 0.0735s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_83,[-0.7092073559761047,0.7319390773773193]=>[-0.7092073559761047,0.7319390773773193] (11,-1; 11,-1), time: 0.3757s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_82,[-1.3117876052856445,0.4756442606449127]=>[-1.3117876052856445,0.4756442606449127] (11,-1; 11,-1), time: 0.3846s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_72,[-1.2924177646636963,0.2637504041194916]=>[-1.2924177646636963,0.2637504041194916] (11,-1; 11,-1), time: 0.4673s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_80,[-0.856499195098877,1.111335039138794]=>[-0.856499195098877,1.111335039138794] (11,-1; 11,-1), time: 0.4624s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_75,[-0.8072139620780945,0.7766262292861938]=>[-0.8072139620780945,0.7766262292861938] (11,-1; 11,-1), time: 0.4694s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_76,[-1.6758723258972168,0.4485011100769043]=>[-1.6758723258972168,0.4485011100769043] (11,-1; 11,-1), time: 0.4842s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_81,[-1.1411786079406738,0.7388122081756592]=>[-1.1411786079406738,0.7388122081756592] (11,-1; 11,-1), time: 0.4623s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_78,[-0.5061037540435791,0.880866289138794]=>[-0.5061037540435791,0.880866289138794] (11,-1; 11,-1), time: 0.4862s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_96,[-1.4351489543914795,0.10812723636627197]=>[-1.4351489543914795,-1e-05] (-1,-1; 15,-1), time: 0.0723s, #vars: 1235, #constrs: 522, improved: True
Solving MIP for lay/input.7_74,[-1.125644326210022,0.4918251931667328]=>[-1.125644326210022,0.4918251931667328] (11,-1; 11,-1), time: 0.6165s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_87,[-0.9930832386016846,0.9205548763275146]=>[-0.9930832386016846,0.9205548763275146] (11,-1; 11,-1), time: 0.3437s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_89,[-0.6893578171730042,0.9318059682846069]=>[-0.6893578171730042,0.9318059682846069] (11,-1; 11,-1), time: 0.2705s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_90,[-1.7977557182312012,0.1574656367301941]=>[-1.7977557182312012,0.1574656367301941] (11,-1; 11,-1), time: 0.3071s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_91,[-0.9992143511772156,0.862433671951294]=>[-0.9992143511772156,0.862433671951294] (11,-1; 11,-1), time: 0.3112s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_95,[-1.3474111557006836,0.1640336513519287]=>[-1.3474111557006836,0.1640336513519287] (11,-1; 11,-1), time: 0.3221s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_94,[-1.5946035385131836,0.5351666212081909]=>[-1.5946035385131836,0.5351666212081909] (11,-1; 11,-1), time: 0.3308s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_93,[-0.3024944067001343,1.664386510848999]=>[-0.3024944067001343,1.664386510848999] (11,-1; 11,-1), time: 0.3575s, #vars: 1235, #constrs: 522, improved: False
Solving MIP for lay/input.7_98,[-1.6787168979644775,0.5655311346054077]=>[-1.6787168979644775,0.5655311346054077] (11,-1; 11,-1), time: 0.3807s, #vars: 1235, #constrs: 522, improved: False
best_l after optimization: -32.10990905761719
beta sum per layer: []
alpha/beta optimization time: 5.025069713592529
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.90337944, -3.15681982, -2.35916185, -2.93124962, -4.48085070,
         -1.13237762, -3.92569351, -5.23713875, -5.98323917]], device='cuda:0') None
